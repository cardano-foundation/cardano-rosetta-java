version: '3.8'
services:
  api:
    image: cardanofoundation/cardano-rosetta-java-api:${API_DOCKER_IMAGE_TAG}
    build:
      context: ./
      dockerfile: ./api/Dockerfile
    ports:
      - ${API_PORT}:${API_PORT}
    environment:
      NETWORK: ${NETWORK}
      API_SPRING_PROFILES_ACTIVE: ${API_SPRING_PROFILES_ACTIVE}
      API_PORT: ${API_PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_SECRET: ${DB_SECRET}
      DB_SCHEMA: ${DB_SCHEMA}
      CARDANO_NODE_VERSION: ${CARDANO_NODE_VERSION}
      TOPOLOGY_FILEPATH: ${TOPOLOGY_FILEPATH}
      GENESIS_SHELLEY_PATH: ${GENESIS_SHELLEY_PATH}
      GENESIS_ALONZO_PATH: ${GENESIS_ALONZO_PATH}
      GENESIS_CONWAY_PATH: ${GENESIS_CONWAY_PATH}
      CARDANO_NODE_SUBMIT_HOST: ${CARDANO_NODE_SUBMIT_HOST}
      NODE_SUBMIT_API_PORT: ${NODE_SUBMIT_API_PORT}
      CARDANO_NODE_SOCKET_PATH: ${CARDANO_NODE_SOCKET_PATH}
      DEVKIT_ENABLED: ${DEVKIT_ENABLED}
      DEVKIT_URL: ${DEVKIT_URL}
      DEVKIT_PORT: ${DEVKIT_PORT}
    volumes:
      - ${CARDANO_CONFIG}:/config
      - ${CARDANO_NODE_DIR}:${CARDANO_NODE_DIR}
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:${API_PORT}/network/options -H 'Content-Type: application/json' --data '{\"network_identifier\": {\"blockchain\": \"cardano\",\"network\": \"${NETWORK}\"},\"metadata\": {}}' -X POST" ]
      interval: 30s
      retries: 20
      start_period: 20s
      timeout: 10s
    restart: always
    depends_on:
      db:
        condition: service_healthy

  yaci-indexer:
    image: cardanofoundation/cardano-rosetta-java-indexer:${INDEXER_DOCKER_IMAGE_TAG}
    build:
      context: ./
      dockerfile: ./yaci-indexer/Dockerfile
    environment:
      NETWORK: ${NETWORK}
      YACI_SPRING_PROFILES: ${YACI_SPRING_PROFILES}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_SECRET: ${DB_SECRET}
      DB_SCHEMA: ${DB_SCHEMA}
      CARDANO_NODE_HOST: ${CARDANO_NODE_HOST}
      CARDANO_NODE_PORT: ${CARDANO_NODE_PORT}
      PROTOCOL_MAGIC: ${PROTOCOL_MAGIC}
      GENESIS_SHELLEY_PATH: ${GENESIS_SHELLEY_PATH}
      GENESIS_BYRON_PATH: ${GENESIS_BYRON_PATH}
      GENESIS_ALONZO_PATH: ${GENESIS_ALONZO_PATH}
      GENESIS_CONWAY_PATH: ${GENESIS_CONWAY_PATH}
      PRUNING_ENABLED: ${PRUNING_ENABLED}
      CARDANO_NODE_SOCKET_PATH: ${CARDANO_NODE_SOCKET_PATH}
      HOST_N2C_SOCAT_HOST: ${HOST_N2C_SOCAT_HOST}
      HOST_N2C_SOCAT_PORT: ${HOST_N2C_SOCAT_PORT}
      SEARCH_PAGE_SIZE: ${SEARCH_PAGE_SIZE}
    volumes:
      - ${CARDANO_CONFIG}:/config
      - ${CARDANO_NODE_DIR}:${CARDANO_NODE_DIR}
    restart: always
    depends_on:
      db:
        condition: service_healthy

  db:
    image: ${DB_IMAGE_NAME}:${DB_IMAGE_TAG}
    shm_size: 30g
    ports:
      - ${DB_PORT}:${DB_PORT}
    command: -p ${DB_PORT}
    environment:
      POSTGRES_PASSWORD: ${DB_SECRET}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    restart: on-failure
    volumes:
      - ${DB_PATH}:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME} -p ${DB_PORT} -h localhost"]
      interval: 10s
      timeout: 3s
      retries: 10

volumes:
  data:

networks:
  default:
    name: cardano-rosetta-java-${NETWORK}
