version: '3.8'
services:
  api:
    build:
      context: ./
      dockerfile: ./api/Dockerfile
      args:
        NETWORK: "${NETWORK}"
    platform: linux/amd64
    ports:
      - "${API_BIND_PORT}:${API_EXPOSED_PORT}"
    environment:
      NETWORK: "${NETWORK}"
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      DB_NAME: "${DB_NAME}"
      DB_USER: "${DB_ADMIN_USER_NAME}"
      DB_SECRET: "${DB_ADMIN_USER_SECRET}"
      DB_DRIVER_CLASS_NAME: "${DB_DRIVER_CLASS_NAME}"
      CARDANO_NODE_VERSION: ${CARDANO_NODE_VERSION}
      API_SPRING_PROFILES_ACTIVE: ${API_SPRING_PROFILES_ACTIVE_API}
      DB_CONNECTION_PARAMS_PROVIDER_TYPE: ${DB_CONNECTION_PARAMS_PROVIDER_TYPE}
      PROTOCOL_MAGIC: ${PROTOCOL_MAGIC}
      NETWORK_MAGIC: ${PROTOCOL_MAGIC}
      TRANSACTION_TTL: ${TRANSACTION_TTL}
      TOPOLOGY_FILEPATH: ${TOPOLOGY_FILEPATH}
      GENESIS_SHELLEY_PATH: ${GENESIS_SHELLEY_PATH}
      NODE_SUBMIT_API_PORT: ${NODE_SUBMIT_API_PORT}
      CARDANO_NODE_HOST: ${CARDANO_NODE_HOST}
      API_NODE_SOCKET_PATH: /ipc/node.socket
      DEVKIT_ENABLED: ${DEVKIT_ENABLED}
      DEVKIT_URL: ${DEVKIT_URL}
      DEVKIT_PORT: ${HOST_N2C_SOCAT_PORT}
    volumes:
      - ./config:/config
      - ${CARDANO_NODE_SOCKET}:/ipc/node.socket
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:${API_BIND_PORT}/network/options -H 'Content-Type: application/json' --data '{\"metadata\": {}}' -X POST" ]
      interval: 30s
      retries: 20
      start_period: 20s
      timeout: 10s
    depends_on:
      db:
        condition: service_healthy
  yaci-indexer:
    build:
      context: ./
      dockerfile: ./yaci-indexer/Dockerfile
    environment:
      API_SPRING_PROFILES_ACTIVE: ${API_SPRING_PROFILES_ACTIVE_YACI_INDEXER}
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      DB_NAME: "${DB_NAME}"
      DB_USER: "${DB_ADMIN_USER_NAME}"
      DB_SECRET: "${DB_ADMIN_USER_SECRET}"
      DB_DRIVER_CLASS_NAME: "${DB_DRIVER_CLASS_NAME}"
      CARDANO_NODE_HOST: "${CARDANO_NODE_HOST}"
      CARDANO_NODE_PORT: "${INDEXER_NODE_PORT}"
      PROTOCOL_MAGIC: "${PROTOCOL_MAGIC}"
      NETWORK: "${NETWORK}"
      GENESIS_SHELLEY_PATH: "${GENESIS_SHELLEY_PATH}"
      GENESIS_BYRON_PATH: "${GENESIS_BYRON_PATH}"
      GENESIS_ALONZO_PATH: "${GENESIS_ALONZO_PATH}"
      GENESIS_CONWAY_PATH: "${GENESIS_CONWAY_PATH}"
    volumes:
      - ./config:/config
    restart: always
    depends_on:
      db:
        condition: service_healthy
  db:
    image: "${DB_IMAGE_NAME}:${DB_IMAGE_TAG}"
    shm_size: 30g
    ports:
      - "${DB_PORT}:${DB_PORT}"
    command: -p ${DB_PORT}
    environment:
      POSTGRES_PASSWORD: "${DB_ADMIN_USER_SECRET}"
      POSTGRES_USER: "${DB_ADMIN_USER_NAME}"
      POSTGRES_DB: "${DB_NAME}"
    restart: on-failure
    volumes:
      - ${DB_PATH}:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_ADMIN_USER_NAME} -p ${DB_PORT}" ]
      interval: 10s
      timeout: 3s
      retries: 10
volumes:
  data:
networks:
  default:
    name: cardano-rosetta-java-${NETWORK}
