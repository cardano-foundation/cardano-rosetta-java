# Test Environment for Snapshot Restore Validation
# This creates test API and Indexer services that connect to existing infrastructure

services:
  # Test Indexer - Connects to test database 
  yaci-indexer-test:
    image: cardanofoundation/cardano-rosetta-java-indexer:${INDEXER_DOCKER_IMAGE_TAG}
    build:
      context: ./
      dockerfile: ./yaci-indexer/Dockerfile
    environment:
      NETWORK: ${NETWORK}
      YACI_SPRING_PROFILES: ${YACI_SPRING_PROFILES}
      DB_HOST: db-test
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_SECRET: ${DB_SECRET}
      DB_SCHEMA: ${DB_SCHEMA}
      CARDANO_NODE_HOST: ${CARDANO_NODE_HOST}
      CARDANO_NODE_PORT: ${CARDANO_NODE_PORT}
      PROTOCOL_MAGIC: ${PROTOCOL_MAGIC}
      GENESIS_SHELLEY_PATH: ${GENESIS_SHELLEY_PATH}
      GENESIS_BYRON_PATH: ${GENESIS_BYRON_PATH}
      GENESIS_ALONZO_PATH: ${GENESIS_ALONZO_PATH}
      GENESIS_CONWAY_PATH: ${GENESIS_CONWAY_PATH}
      REMOVE_SPENT_UTXOS: ${REMOVE_SPENT_UTXOS}
      REMOVE_SPENT_UTXOS_LAST_BLOCKS_GRACE_COUNT: ${REMOVE_SPENT_UTXOS_LAST_BLOCKS_GRACE_COUNT}
      BLOCK_TRANSACTION_API_TIMEOUT_SECS: ${BLOCK_TRANSACTION_API_TIMEOUT_SECS}
      CARDANO_NODE_SOCKET_PATH: ${CARDANO_NODE_SOCKET_PATH}
      HOST_N2C_SOCAT_HOST: ${HOST_N2C_SOCAT_HOST}
      HOST_N2C_SOCAT_PORT: ${HOST_N2C_SOCAT_PORT}
      SEARCH_PAGE_SIZE: ${SEARCH_PAGE_SIZE}
      CONTINUE_PARSING_ON_ERROR: ${CONTINUE_PARSING_ON_ERROR}
    volumes:
      - ${CARDANO_CONFIG}:/config
      - ${CARDANO_NODE_DIR}:${CARDANO_NODE_DIR}
    ports:
      - ${YACI_INDEXER_TEST_PORT:-9096}:9095
    restart: "no"  # Don't auto-restart for testing
    depends_on:
      db-snapshot-restore-test:
        condition: service_completed_successfully

  # Test API - Connects to restored database
  api-test:
    image: cardanofoundation/cardano-rosetta-java-api:${API_DOCKER_IMAGE_TAG}
    build:
      context: ./
      dockerfile: ./api/Dockerfile
    ports:
      - ${API_TEST_PORT:-8083}:8082
    environment:
      NETWORK: ${NETWORK}
      API_SPRING_PROFILES_ACTIVE: ${API_SPRING_PROFILES_ACTIVE}
      API_PORT: 8082  # Internal port
      DB_HOST: db-test
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_SECRET: ${DB_SECRET}
      DB_SCHEMA: ${DB_SCHEMA}
      CARDANO_NODE_VERSION: ${CARDANO_NODE_VERSION}
      TOPOLOGY_FILEPATH: ${TOPOLOGY_FILEPATH}
      GENESIS_SHELLEY_PATH: ${GENESIS_SHELLEY_PATH}
      GENESIS_ALONZO_PATH: ${GENESIS_ALONZO_PATH}
      GENESIS_CONWAY_PATH: ${GENESIS_CONWAY_PATH}
      CARDANO_NODE_SUBMIT_HOST: ${CARDANO_NODE_SUBMIT_HOST}
      NODE_SUBMIT_API_PORT: ${NODE_SUBMIT_API_PORT}
      CARDANO_NODE_SOCKET_PATH: ${CARDANO_NODE_SOCKET_PATH}
      YACI_HTTP_BASE_URL: http://yaci-indexer-test:9095/api/v1
      

      API_DB_POOL_MIN_COUNT: ${API_DB_POOL_MIN_COUNT}
      API_DB_POOL_MAX_COUNT: ${API_DB_POOL_MAX_COUNT}
      API_DB_POOL_MAX_LIFETIME_MS: ${API_DB_POOL_MAX_LIFETIME_MS}
      API_DB_POOL_CONNECTION_TIMEOUT_MS: ${API_DB_POOL_CONNECTION_TIMEOUT_MS}
      API_DB_KEEP_ALIVE_MS: ${API_DB_KEEP_ALIVE_MS}
      API_DB_LEAK_CONNECTIONS_WARNING_MS: ${API_DB_LEAK_CONNECTIONS_WARNING_MS}
      API_DB_MONITOR_PERFORMANCE: ${API_DB_MONITOR_PERFORMANCE}
      API_DB_SHOW_SQL: ${API_DB_SHOW_SQL}
    volumes:
      - ${CARDANO_CONFIG}:/config
      - ${CARDANO_NODE_DIR}:${CARDANO_NODE_DIR}
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:8082/network/options -H 'Content-Type: application/json' --data '{\"network_identifier\": {\"blockchain\": \"cardano\",\"network\": \"${NETWORK}\"},\"metadata\": {}}' -X POST" ]
      interval: 30s
      retries: 20
      start_period: 20s
      timeout: 10s
    restart: "no"  # Don't auto-restart for testing
    depends_on:
      db-test:
        condition: service_healthy

  # Test Database - Isolated database for restore testing
  db-test:
    image: cardanofoundation/cardano-rosetta-java-postgres:${PG_VERSION_TAG}
    build:
      context: ./
      dockerfile: ./docker/dockerfiles/postgres/Dockerfile
    shm_size: 4g
    ports:
      - ${DB_TEST_PORT}:${DB_PORT}
    environment:
      DB_SECRET: ${DB_SECRET}
      DB_USER: ${DB_USER}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
      NETWORK: ${NETWORK}
      PGPASSWORD: postgres

      DB_POSTGRES_MAX_CONNECTIONS: ${DB_POSTGRES_MAX_CONNECTIONS}
      DB_POSTGRES_SHARED_BUFFERS: ${DB_POSTGRES_SHARED_BUFFERS}
      DB_POSTGRES_EFFECTIVE_CACHE_SIZE: ${DB_POSTGRES_EFFECTIVE_CACHE_SIZE}
      DB_POSTGRES_WORK_MEM: ${DB_POSTGRES_WORK_MEM}
      DB_POSTGRES_MAINTENANCE_WORK_MEM: ${DB_POSTGRES_MAINTENANCE_WORK_MEM}
      DB_POSTGRES_WAL_BUFFERS: ${DB_POSTGRES_WAL_BUFFERS}
      DB_POSTGRES_CHECKPOINT_COMPLETION_TARGET: ${DB_POSTGRES_CHECKPOINT_COMPLETION_TARGET}
      DB_POSTGRES_RANDOM_PAGE_COST: ${DB_POSTGRES_RANDOM_PAGE_COST}

      # Additional settings for advanced PostgreSQL tuning
      DB_POSTGRES_EFFECTIVE_IO_CONCURRENCY: ${DB_POSTGRES_EFFECTIVE_IO_CONCURRENCY}
      DB_POSTGRES_PARALLEL_TUPLE_COST: ${DB_POSTGRES_PARALLEL_TUPLE_COST}
      DB_POSTGRES_PARALLEL_SETUP_COST: ${DB_POSTGRES_PARALLEL_SETUP_COST}
      DB_POSTGRES_MAX_PARALLEL_WORKERS_PER_GATHER: ${DB_POSTGRES_MAX_PARALLEL_WORKERS_PER_GATHER}
      DB_POSTGRES_MAX_PARALLEL_WORKERS: ${DB_POSTGRES_MAX_PARALLEL_WORKERS}
      DB_POSTGRES_SEQ_PAGE_COST: ${DB_POSTGRES_SEQ_PAGE_COST}
      DB_POSTGRES_JIT: ${DB_POSTGRES_JIT}
      DB_POSTGRES_BGWRITER_LRU_MAXPAGES: ${DB_POSTGRES_BGWRITER_LRU_MAXPAGES}
      DB_POSTGRES_BGWRITER_DELAY: ${DB_POSTGRES_BGWRITER_DELAY}
    restart: on-failure
    volumes:
      - ${DB_TEST_PATH}:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "PGPASSWORD=${DB_SECRET} pg_isready -U ${DB_USER} -d ${DB_NAME} -p ${DB_PORT} -h localhost"]
      interval: 10s
      timeout: 3s
      retries: 10
    
  # Test Snapshot Restore Service - Downloads from IAGON and restores to db-test
  db-snapshot-restore-test:
    image: cardanofoundation/cardano-rosetta-java-postgres-client:${PG_CLIENT_VERSION_TAG:-14-alpine}
    build:
      context: ./
      dockerfile: ./docker/dockerfiles/postgres-client/Dockerfile
    entrypoint: ["/sbin/restore-entrypoint.sh"]
    environment:
      # Restore configuration
      SNAPSHOT_RESTORE_ENABLED: ${SNAPSHOT_RESTORE_ENABLED:-false}
      RESTORE_VALIDATION_ENABLED: ${RESTORE_VALIDATION_ENABLED:-true}
      
      # IAGON Configuration
      IAGON_METADATA_FILE: ${IAGON_METADATA_FILE:-""}
      
      # Database connection - connect to db-test
      DB_HOST: db-test
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-rosetta-java}
      DB_USER: ${DB_USER:-rosetta_db_admin}
      DB_SECRET: ${DB_SECRET:-weakpwd#123_d}
      DB_SCHEMA: ${DB_SCHEMA:-preprod}
      NETWORK: ${NETWORK:-preprod}
    volumes:
      - ${SNAPSHOT_SOURCE_PATH:-./infra/snapshots/snapshots}:/snapshots
    depends_on:
      db-test:
        condition: service_healthy
    restart: "no"

volumes:
  db-test-data:
    driver: local

networks:
  default:
    name: cardano-rosetta-java-${NETWORK}  # Use same network as main services