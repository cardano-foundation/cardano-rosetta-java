name: PR Preprod Tests

on:
  pull_request:
    branches: [develop, main]
  workflow_dispatch:  # Allow manual trigger for debugging

# Permissions needed for GitHub Pages deployment and PR comments
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

jobs:
  test-on-preprod:
    runs-on: [self-hosted, preprod]
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v3

      - name: Update local repository
        run: |
          cd /home/integration/git/cardano-rosetta-java

          # Add the fork as a remote if this is a fork PR
          if [ "${{ github.event.pull_request.head.repo.fork }}" == "true" ]; then
            git remote add fork https://github.com/${{ github.event.pull_request.head.repo.full_name }}.git || true
            git fetch fork ${{ github.event.pull_request.head.ref }}
            git checkout -B pr-test FETCH_HEAD
          else
            # Regular PR from the same repo
            git fetch origin pull/${{ github.event.pull_request.number }}/head:pr-${{ github.event.pull_request.number }}
            git checkout pr-${{ github.event.pull_request.number }}
          fi

      - name: Stop current services
        run: |
          cd /home/integration/git/cardano-rosetta-java

          # Stop all services
          docker compose \
            --env-file .env.docker-compose-preprod \
            --env-file .env.docker-compose-profile-entry-level \
            -f docker-compose.yaml \
            down


      - name: Build and start services with PR code
        run: |
          cd /home/integration/git/cardano-rosetta-java

          # Build and start all services
          docker compose \
            --env-file .env.docker-compose-preprod \
            --env-file .env.docker-compose-profile-entry-level \
            -f docker-compose.yaml \
            up --build -d --wait

      - name: Wait for API to sync
        timeout-minutes: 10
        run: |
          echo "Waiting for API to be ready..."

          # Wait for API to respond
          for i in {1..60}; do
            if curl -sf -X POST http://localhost:8082/network/list \
              -H 'Content-Type: application/json' \
              -d '{}' > /dev/null 2>&1; then
              echo "API is responding"
              break
            fi
            echo "Waiting for API to start... ($i/60)"
            sleep 10
          done

          # Check sync status
          echo "Checking sync status..."
          while true; do
            SYNC_STATUS=$(curl -s -X POST http://localhost:8082/network/status \
              -H 'Content-Type: application/json' \
              -d '{"network_identifier": {"blockchain": "cardano", "network": "preprod"}}' | \
              jq -r '.sync_status.synced' 2>/dev/null || echo "false")

            if [ "$SYNC_STATUS" = "true" ]; then
              echo "‚úì API is synced and ready!"

              # Show current block for verification
              CURRENT_BLOCK=$(curl -s -X POST http://localhost:8082/network/status \
                -H 'Content-Type: application/json' \
                -d '{"network_identifier": {"blockchain": "cardano", "network": "preprod"}}' | \
                jq -r '.current_block_identifier.index')
              echo "Current block: $CURRENT_BLOCK"
              break
            fi

            echo "Waiting for sync... (synced=$SYNC_STATUS)"
            sleep 10
          done

      - name: Install test dependencies
        run: |
          # Ensure uv is in PATH
          export PATH="$HOME/.local/bin:$PATH"

          cd /home/integration/git/cardano-rosetta-java/tests/data-endpoints

          # Sync Python dependencies
          uv sync

      - name: Run data endpoint tests
        id: test
        run: |
          export PATH="$HOME/.local/bin:$PATH"

          cd /home/integration/git/cardano-rosetta-java/tests/data-endpoints

          # Run tests with Allure reporting
          uv run pytest \
            --alluredir=./allure-results \
            --tb=short \
            -v || TEST_RESULT=$?

          # Output test result for later steps
          echo "test_result=${TEST_RESULT:-0}" >> $GITHUB_OUTPUT

          # Fail if tests failed
          exit ${TEST_RESULT:-0}
        env:
          ROSETTA_URL: http://localhost:8082
          CARDANO_NETWORK: preprod

      - name: Generate Allure report
        if: always() && steps.test.outcome != 'skipped'
        run: |
          export PATH="/opt/allure-2.24.0/bin:$HOME/.local/bin:$PATH"

          cd /home/integration/git/cardano-rosetta-java/tests/data-endpoints

          # Generate Allure HTML report
          if command -v allure &> /dev/null; then
            allure generate allure-results --clean -o allure-report
            echo "Allure report generated successfully"
          else
            echo "Allure CLI not installed, skipping HTML report generation"
            echo "Raw results are in allure-results directory"
          fi

      - name: Deploy report to GitHub Pages
        # Only deploy for non-fork PRs due to permission limitations
        if: |
          always() &&
          steps.test.outcome != 'skipped' &&
          github.event_name == 'pull_request' &&
          github.event.pull_request.head.repo.fork == false
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: /home/integration/git/cardano-rosetta-java/tests/data-endpoints/allure-report
          destination_dir: test-reports/pr-${{ github.event.pull_request.number }}
          keep_files: true
          user_name: 'github-actions[bot]'
          user_email: '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Comment PR with results
        if: always() && github.event_name == 'pull_request' && steps.test.outcome != 'skipped'
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = context.issue.number;
            const testResult = '${{ steps.test.outputs.test_result }}';
            const emoji = testResult === '0' ? '‚úÖ' : '‚ùå';
            const status = testResult === '0' ? 'PASSED' : 'FAILED';
            const isFork = ${{ github.event.pull_request.head.repo.fork }};

            // Build comment body
            let comment = `## ${emoji} Preprod Tests: ${status}\n\n`;

            // Only add report link for non-fork PRs
            if (!isFork) {
              const reportUrl = `https://cardano-foundation.github.io/cardano-rosetta-java/test-reports/pr-${prNumber}/`;
              comment += `üìä **[View Detailed Test Report](${reportUrl})**\n\n`;
            }

            comment += `üîó [Action Run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n`;
            comment += `_Tests run against preprod network with live blockchain data_`;

            // Post comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

      - name: Clean shutdown on failure
        if: failure() && (steps.test.outcome == 'failure' || steps.test.outcome == 'cancelled')
        run: |
          cd /home/integration/git/cardano-rosetta-java

          echo "‚ö†Ô∏è Test failed - stopping services"

          # Stop all services cleanly
          docker compose \
            --env-file .env.docker-compose-preprod \
            --env-file .env.docker-compose-profile-entry-level \
            -f docker-compose.yaml \
            down

          # Check if migrations changed in this PR
          LAST_TAG=$(git describe --tags --abbrev=0)
          git checkout $LAST_TAG

          STABLE_MIGRATION_HASH=$(find . -path "*/db/migration/*.sql" -type f -exec md5sum {} \; | sort | md5sum | cut -d' ' -f1)

          git checkout -
          PR_MIGRATION_HASH=$(find . -path "*/db/migration/*.sql" -type f -exec md5sum {} \; | sort | md5sum | cut -d' ' -f1)

          if [ "$STABLE_MIGRATION_HASH" != "$PR_MIGRATION_HASH" ]; then
            echo "‚ö†Ô∏è Database migrations changed in PR - fixing Flyway metadata only"

            # Start only the database
            docker compose \
              --env-file .env.docker-compose-preprod \
              --env-file .env.docker-compose-profile-entry-level \
              -f docker-compose.yaml \
              up -d db

            # Wait for db to be ready
            sleep 5

            # Find which specific migration files changed
            CHANGED_MIGRATIONS=$(git diff $LAST_TAG --name-only | grep "db/migration" | grep -oP "V[\d._]+" | sort -u)

            if [ -n "$CHANGED_MIGRATIONS" ]; then
              echo "Changed migration versions: $CHANGED_MIGRATIONS"

              # Delete ONLY the Flyway metadata for changed migrations
              # This preserves all blockchain data!
              for VERSION in $CHANGED_MIGRATIONS; do
                echo "Removing Flyway metadata for version: $VERSION"
                docker exec cardano-rosetta-java-db-1 sh -c \
                  "PGPASSWORD=weakpwd#123_d psql -U rosetta_db_admin -d rosetta-java \
                   -c \"DELETE FROM preprod.flyway_schema_history WHERE version LIKE '${VERSION}%';\""
              done

              echo "‚úì Flyway metadata cleaned - all blockchain data preserved"
            else
              echo "No specific migration versions detected - truncating flyway history"
              docker exec cardano-rosetta-java-db-1 sh -c \
                "PGPASSWORD=weakpwd#123_d psql -U rosetta_db_admin -d rosetta-java \
                 -c 'TRUNCATE preprod.flyway_schema_history;'"
            fi

            docker compose \
              --env-file .env.docker-compose-preprod \
              --env-file .env.docker-compose-profile-entry-level \
              -f docker-compose.yaml \
              down
          fi

          # Now safe to rollback
          echo "Rolling back to stable version: $LAST_TAG"
          git checkout $LAST_TAG

          docker compose \
            --env-file .env.docker-compose-preprod \
            --env-file .env.docker-compose-profile-entry-level \
            -f docker-compose.yaml \
            up -d

          # Wait for API to be ready after rollback
          echo "Waiting for API to be ready after rollback..."
          for i in {1..30}; do
            if curl -sf -X POST http://localhost:8082/network/list \
              -H 'Content-Type: application/json' \
              -d '{}' > /dev/null 2>&1; then
              echo "‚úì API is responding"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 5
          done

          echo "‚úÖ Rollback to $LAST_TAG completed"