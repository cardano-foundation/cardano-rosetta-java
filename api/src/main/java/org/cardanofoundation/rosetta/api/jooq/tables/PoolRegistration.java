/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables;


import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.cardanofoundation.rosetta.api.jooq.Indexes;
import org.cardanofoundation.rosetta.api.jooq.Keys;
import org.cardanofoundation.rosetta.api.jooq.Preprod;
import org.cardanofoundation.rosetta.api.jooq.tables.records.PoolRegistrationRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PoolRegistration extends TableImpl<PoolRegistrationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod.pool_registration</code>
     */
    public static final PoolRegistration POOL_REGISTRATION = new PoolRegistration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PoolRegistrationRecord> getRecordType() {
        return PoolRegistrationRecord.class;
    }

    /**
     * The column <code>preprod.pool_registration.tx_hash</code>.
     */
    public final TableField<PoolRegistrationRecord, String> TX_HASH = createField(DSL.name("tx_hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>preprod.pool_registration.cert_index</code>.
     */
    public final TableField<PoolRegistrationRecord, Integer> CERT_INDEX = createField(DSL.name("cert_index"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>preprod.pool_registration.pool_id</code>.
     */
    public final TableField<PoolRegistrationRecord, String> POOL_ID = createField(DSL.name("pool_id"), SQLDataType.VARCHAR(56), this, "");

    /**
     * The column <code>preprod.pool_registration.vrf_key</code>.
     */
    public final TableField<PoolRegistrationRecord, String> VRF_KEY = createField(DSL.name("vrf_key"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.pool_registration.pledge</code>.
     */
    public final TableField<PoolRegistrationRecord, BigInteger> PLEDGE = createField(DSL.name("pledge"), SQLDataType.DECIMAL_INTEGER(20), this, "");

    /**
     * The column <code>preprod.pool_registration.cost</code>.
     */
    public final TableField<PoolRegistrationRecord, BigInteger> COST = createField(DSL.name("cost"), SQLDataType.DECIMAL_INTEGER(20), this, "");

    /**
     * The column <code>preprod.pool_registration.margin</code>.
     */
    public final TableField<PoolRegistrationRecord, BigDecimal> MARGIN = createField(DSL.name("margin"), SQLDataType.NUMERIC(10, 8), this, "");

    /**
     * The column <code>preprod.pool_registration.reward_account</code>.
     */
    public final TableField<PoolRegistrationRecord, String> REWARD_ACCOUNT = createField(DSL.name("reward_account"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>preprod.pool_registration.pool_owners</code>.
     */
    public final TableField<PoolRegistrationRecord, JSONB> POOL_OWNERS = createField(DSL.name("pool_owners"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.pool_registration.relays</code>.
     */
    public final TableField<PoolRegistrationRecord, JSONB> RELAYS = createField(DSL.name("relays"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.pool_registration.metadata_url</code>.
     */
    public final TableField<PoolRegistrationRecord, String> METADATA_URL = createField(DSL.name("metadata_url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>preprod.pool_registration.metadata_hash</code>.
     */
    public final TableField<PoolRegistrationRecord, String> METADATA_HASH = createField(DSL.name("metadata_hash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.pool_registration.epoch</code>.
     */
    public final TableField<PoolRegistrationRecord, Integer> EPOCH = createField(DSL.name("epoch"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>preprod.pool_registration.slot</code>.
     */
    public final TableField<PoolRegistrationRecord, Long> SLOT = createField(DSL.name("slot"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.pool_registration.block_hash</code>.
     */
    public final TableField<PoolRegistrationRecord, String> BLOCK_HASH = createField(DSL.name("block_hash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.pool_registration.block</code>.
     */
    public final TableField<PoolRegistrationRecord, Long> BLOCK = createField(DSL.name("block"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.pool_registration.block_time</code>.
     */
    public final TableField<PoolRegistrationRecord, Long> BLOCK_TIME = createField(DSL.name("block_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.pool_registration.update_datetime</code>.
     */
    public final TableField<PoolRegistrationRecord, LocalDateTime> UPDATE_DATETIME = createField(DSL.name("update_datetime"), SQLDataType.LOCALDATETIME(6), this, "");

    private PoolRegistration(Name alias, Table<PoolRegistrationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PoolRegistration(Name alias, Table<PoolRegistrationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preprod.pool_registration</code> table reference
     */
    public PoolRegistration(String alias) {
        this(DSL.name(alias), POOL_REGISTRATION);
    }

    /**
     * Create an aliased <code>preprod.pool_registration</code> table reference
     */
    public PoolRegistration(Name alias) {
        this(alias, POOL_REGISTRATION);
    }

    /**
     * Create a <code>preprod.pool_registration</code> table reference
     */
    public PoolRegistration() {
        this(DSL.name("pool_registration"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Preprod.PREPROD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_POOL_REGISTRATION_POOL_ID, Indexes.IDX_POOL_REGISTRATION_REWARD_ACCOUNT, Indexes.IDX_POOL_REGISTRATION_SLOT, Indexes.IDX_POOL_REGISTRATION_TXHASH);
    }

    @Override
    public UniqueKey<PoolRegistrationRecord> getPrimaryKey() {
        return Keys.POOL_REGISTRATION_PKEY;
    }

    @Override
    public PoolRegistration as(String alias) {
        return new PoolRegistration(DSL.name(alias), this);
    }

    @Override
    public PoolRegistration as(Name alias) {
        return new PoolRegistration(alias, this);
    }

    @Override
    public PoolRegistration as(Table<?> alias) {
        return new PoolRegistration(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PoolRegistration rename(String name) {
        return new PoolRegistration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PoolRegistration rename(Name name) {
        return new PoolRegistration(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PoolRegistration rename(Table<?> name) {
        return new PoolRegistration(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PoolRegistration where(Condition condition) {
        return new PoolRegistration(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PoolRegistration where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PoolRegistration where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PoolRegistration where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PoolRegistration where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PoolRegistration where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PoolRegistration where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PoolRegistration where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PoolRegistration whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PoolRegistration whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
