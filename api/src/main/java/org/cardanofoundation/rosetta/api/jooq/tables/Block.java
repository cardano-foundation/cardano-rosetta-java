/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables;


import java.math.BigInteger;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.cardanofoundation.rosetta.api.jooq.Indexes;
import org.cardanofoundation.rosetta.api.jooq.Keys;
import org.cardanofoundation.rosetta.api.jooq.Preprod;
import org.cardanofoundation.rosetta.api.jooq.tables.records.BlockRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Block extends TableImpl<BlockRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod.block</code>
     */
    public static final Block BLOCK = new Block();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlockRecord> getRecordType() {
        return BlockRecord.class;
    }

    /**
     * The column <code>preprod.block.hash</code>.
     */
    public final TableField<BlockRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>preprod.block.number</code>.
     */
    public final TableField<BlockRecord, Long> NUMBER = createField(DSL.name("number"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.block.body_hash</code>.
     */
    public final TableField<BlockRecord, String> BODY_HASH = createField(DSL.name("body_hash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.block.body_size</code>.
     */
    public final TableField<BlockRecord, Integer> BODY_SIZE = createField(DSL.name("body_size"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>preprod.block.epoch</code>.
     */
    public final TableField<BlockRecord, Integer> EPOCH = createField(DSL.name("epoch"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>preprod.block.total_output</code>.
     */
    public final TableField<BlockRecord, BigInteger> TOTAL_OUTPUT = createField(DSL.name("total_output"), SQLDataType.DECIMAL_INTEGER(38), this, "");

    /**
     * The column <code>preprod.block.total_fees</code>.
     */
    public final TableField<BlockRecord, Long> TOTAL_FEES = createField(DSL.name("total_fees"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.block.block_time</code>.
     */
    public final TableField<BlockRecord, Long> BLOCK_TIME = createField(DSL.name("block_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.block.era</code>.
     */
    public final TableField<BlockRecord, Short> ERA = createField(DSL.name("era"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>preprod.block.issuer_vkey</code>.
     */
    public final TableField<BlockRecord, String> ISSUER_VKEY = createField(DSL.name("issuer_vkey"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.block.leader_vrf</code>.
     */
    public final TableField<BlockRecord, JSONB> LEADER_VRF = createField(DSL.name("leader_vrf"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.block.nonce_vrf</code>.
     */
    public final TableField<BlockRecord, JSONB> NONCE_VRF = createField(DSL.name("nonce_vrf"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.block.prev_hash</code>.
     */
    public final TableField<BlockRecord, String> PREV_HASH = createField(DSL.name("prev_hash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.block.protocol_version</code>.
     */
    public final TableField<BlockRecord, String> PROTOCOL_VERSION = createField(DSL.name("protocol_version"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.block.slot</code>.
     */
    public final TableField<BlockRecord, Long> SLOT = createField(DSL.name("slot"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.block.vrf_result</code>.
     */
    public final TableField<BlockRecord, JSONB> VRF_RESULT = createField(DSL.name("vrf_result"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.block.vrf_vkey</code>.
     */
    public final TableField<BlockRecord, String> VRF_VKEY = createField(DSL.name("vrf_vkey"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.block.no_of_txs</code>.
     */
    public final TableField<BlockRecord, Integer> NO_OF_TXS = createField(DSL.name("no_of_txs"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>preprod.block.slot_leader</code>.
     */
    public final TableField<BlockRecord, String> SLOT_LEADER = createField(DSL.name("slot_leader"), SQLDataType.VARCHAR(56), this, "");

    /**
     * The column <code>preprod.block.epoch_slot</code>.
     */
    public final TableField<BlockRecord, Integer> EPOCH_SLOT = createField(DSL.name("epoch_slot"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>preprod.block.op_cert_hot_vkey</code>.
     */
    public final TableField<BlockRecord, String> OP_CERT_HOT_VKEY = createField(DSL.name("op_cert_hot_vkey"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.block.op_cert_seq_number</code>.
     */
    public final TableField<BlockRecord, Long> OP_CERT_SEQ_NUMBER = createField(DSL.name("op_cert_seq_number"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.block.op_cert_kes_period</code>.
     */
    public final TableField<BlockRecord, Long> OP_CERT_KES_PERIOD = createField(DSL.name("op_cert_kes_period"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.block.op_cert_sigma</code>.
     */
    public final TableField<BlockRecord, String> OP_CERT_SIGMA = createField(DSL.name("op_cert_sigma"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>preprod.block.create_datetime</code>.
     */
    public final TableField<BlockRecord, LocalDateTime> CREATE_DATETIME = createField(DSL.name("create_datetime"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>preprod.block.update_datetime</code>.
     */
    public final TableField<BlockRecord, LocalDateTime> UPDATE_DATETIME = createField(DSL.name("update_datetime"), SQLDataType.LOCALDATETIME(6), this, "");

    private Block(Name alias, Table<BlockRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Block(Name alias, Table<BlockRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preprod.block</code> table reference
     */
    public Block(String alias) {
        this(DSL.name(alias), BLOCK);
    }

    /**
     * Create an aliased <code>preprod.block</code> table reference
     */
    public Block(Name alias) {
        this(alias, BLOCK);
    }

    /**
     * Create a <code>preprod.block</code> table reference
     */
    public Block() {
        this(DSL.name("block"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Preprod.PREPROD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_BLOCK_EPOCH, Indexes.IDX_BLOCK_NUMBER, Indexes.IDX_BLOCK_SLOT, Indexes.IDX_BLOCK_SLOT_LEADER);
    }

    @Override
    public UniqueKey<BlockRecord> getPrimaryKey() {
        return Keys.BLOCK_PKEY;
    }

    @Override
    public Block as(String alias) {
        return new Block(DSL.name(alias), this);
    }

    @Override
    public Block as(Name alias) {
        return new Block(alias, this);
    }

    @Override
    public Block as(Table<?> alias) {
        return new Block(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Block rename(String name) {
        return new Block(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Block rename(Name name) {
        return new Block(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Block rename(Table<?> name) {
        return new Block(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Block where(Condition condition) {
        return new Block(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Block where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Block where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Block where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Block where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Block where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Block where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Block where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Block whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Block whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
