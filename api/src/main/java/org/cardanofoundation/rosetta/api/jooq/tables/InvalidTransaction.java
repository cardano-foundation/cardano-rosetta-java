/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.cardanofoundation.rosetta.api.jooq.Indexes;
import org.cardanofoundation.rosetta.api.jooq.Keys;
import org.cardanofoundation.rosetta.api.jooq.Preprod;
import org.cardanofoundation.rosetta.api.jooq.tables.records.InvalidTransactionRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class InvalidTransaction extends TableImpl<InvalidTransactionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod.invalid_transaction</code>
     */
    public static final InvalidTransaction INVALID_TRANSACTION = new InvalidTransaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvalidTransactionRecord> getRecordType() {
        return InvalidTransactionRecord.class;
    }

    /**
     * The column <code>preprod.invalid_transaction.tx_hash</code>.
     */
    public final TableField<InvalidTransactionRecord, String> TX_HASH = createField(DSL.name("tx_hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>preprod.invalid_transaction.slot</code>.
     */
    public final TableField<InvalidTransactionRecord, Long> SLOT = createField(DSL.name("slot"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>preprod.invalid_transaction.block_hash</code>.
     */
    public final TableField<InvalidTransactionRecord, String> BLOCK_HASH = createField(DSL.name("block_hash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.invalid_transaction.transaction</code>.
     */
    public final TableField<InvalidTransactionRecord, JSONB> TRANSACTION = createField(DSL.name("transaction"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.invalid_transaction.create_datetime</code>.
     */
    public final TableField<InvalidTransactionRecord, LocalDateTime> CREATE_DATETIME = createField(DSL.name("create_datetime"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>preprod.invalid_transaction.update_datetime</code>.
     */
    public final TableField<InvalidTransactionRecord, LocalDateTime> UPDATE_DATETIME = createField(DSL.name("update_datetime"), SQLDataType.LOCALDATETIME(6), this, "");

    private InvalidTransaction(Name alias, Table<InvalidTransactionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private InvalidTransaction(Name alias, Table<InvalidTransactionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preprod.invalid_transaction</code> table
     * reference
     */
    public InvalidTransaction(String alias) {
        this(DSL.name(alias), INVALID_TRANSACTION);
    }

    /**
     * Create an aliased <code>preprod.invalid_transaction</code> table
     * reference
     */
    public InvalidTransaction(Name alias) {
        this(alias, INVALID_TRANSACTION);
    }

    /**
     * Create a <code>preprod.invalid_transaction</code> table reference
     */
    public InvalidTransaction() {
        this(DSL.name("invalid_transaction"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Preprod.PREPROD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_INVALID_TRANSACTION_SLOT);
    }

    @Override
    public UniqueKey<InvalidTransactionRecord> getPrimaryKey() {
        return Keys.INVALID_TRANSACTION_PKEY;
    }

    @Override
    public InvalidTransaction as(String alias) {
        return new InvalidTransaction(DSL.name(alias), this);
    }

    @Override
    public InvalidTransaction as(Name alias) {
        return new InvalidTransaction(alias, this);
    }

    @Override
    public InvalidTransaction as(Table<?> alias) {
        return new InvalidTransaction(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public InvalidTransaction rename(String name) {
        return new InvalidTransaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InvalidTransaction rename(Name name) {
        return new InvalidTransaction(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public InvalidTransaction rename(Table<?> name) {
        return new InvalidTransaction(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InvalidTransaction where(Condition condition) {
        return new InvalidTransaction(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InvalidTransaction where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InvalidTransaction where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InvalidTransaction where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InvalidTransaction where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InvalidTransaction where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InvalidTransaction where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InvalidTransaction where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InvalidTransaction whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InvalidTransaction whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
