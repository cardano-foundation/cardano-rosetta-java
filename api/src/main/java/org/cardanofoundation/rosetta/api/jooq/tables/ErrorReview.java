/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.cardanofoundation.rosetta.api.jooq.Keys;
import org.cardanofoundation.rosetta.api.jooq.Preprod;
import org.cardanofoundation.rosetta.api.jooq.tables.records.ErrorReviewRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ErrorReview extends TableImpl<ErrorReviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod.error_review</code>
     */
    public static final ErrorReview ERROR_REVIEW = new ErrorReview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ErrorReviewRecord> getRecordType() {
        return ErrorReviewRecord.class;
    }

    /**
     * The column <code>preprod.error_review.id</code>.
     */
    public final TableField<ErrorReviewRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>preprod.error_review.status</code>.
     */
    public final TableField<ErrorReviewRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>preprod.error_review.comment</code>.
     */
    public final TableField<ErrorReviewRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>preprod.error_review.checked_by</code>.
     */
    public final TableField<ErrorReviewRecord, String> CHECKED_BY = createField(DSL.name("checked_by"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>preprod.error_review.last_updated</code>.
     */
    public final TableField<ErrorReviewRecord, LocalDateTime> LAST_UPDATED = createField(DSL.name("last_updated"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private ErrorReview(Name alias, Table<ErrorReviewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ErrorReview(Name alias, Table<ErrorReviewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preprod.error_review</code> table reference
     */
    public ErrorReview(String alias) {
        this(DSL.name(alias), ERROR_REVIEW);
    }

    /**
     * Create an aliased <code>preprod.error_review</code> table reference
     */
    public ErrorReview(Name alias) {
        this(alias, ERROR_REVIEW);
    }

    /**
     * Create a <code>preprod.error_review</code> table reference
     */
    public ErrorReview() {
        this(DSL.name("error_review"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Preprod.PREPROD;
    }

    @Override
    public UniqueKey<ErrorReviewRecord> getPrimaryKey() {
        return Keys.ERROR_REVIEW_PKEY;
    }

    @Override
    public ErrorReview as(String alias) {
        return new ErrorReview(DSL.name(alias), this);
    }

    @Override
    public ErrorReview as(Name alias) {
        return new ErrorReview(alias, this);
    }

    @Override
    public ErrorReview as(Table<?> alias) {
        return new ErrorReview(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ErrorReview rename(String name) {
        return new ErrorReview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ErrorReview rename(Name name) {
        return new ErrorReview(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ErrorReview rename(Table<?> name) {
        return new ErrorReview(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ErrorReview where(Condition condition) {
        return new ErrorReview(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ErrorReview where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ErrorReview where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ErrorReview where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ErrorReview where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ErrorReview where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ErrorReview where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ErrorReview where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ErrorReview whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ErrorReview whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
