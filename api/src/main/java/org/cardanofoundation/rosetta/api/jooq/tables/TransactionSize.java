/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables;


import java.util.Collection;

import org.cardanofoundation.rosetta.api.jooq.Keys;
import org.cardanofoundation.rosetta.api.jooq.Preprod;
import org.cardanofoundation.rosetta.api.jooq.tables.records.TransactionSizeRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TransactionSize extends TableImpl<TransactionSizeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod.transaction_size</code>
     */
    public static final TransactionSize TRANSACTION_SIZE = new TransactionSize();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionSizeRecord> getRecordType() {
        return TransactionSizeRecord.class;
    }

    /**
     * The column <code>preprod.transaction_size.tx_hash</code>.
     */
    public final TableField<TransactionSizeRecord, String> TX_HASH = createField(DSL.name("tx_hash"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>preprod.transaction_size.block_number</code>.
     */
    public final TableField<TransactionSizeRecord, Long> BLOCK_NUMBER = createField(DSL.name("block_number"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>preprod.transaction_size.size</code>.
     */
    public final TableField<TransactionSizeRecord, Integer> SIZE = createField(DSL.name("size"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>preprod.transaction_size.script_size</code>.
     */
    public final TableField<TransactionSizeRecord, Integer> SCRIPT_SIZE = createField(DSL.name("script_size"), SQLDataType.INTEGER.nullable(false), this, "");

    private TransactionSize(Name alias, Table<TransactionSizeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TransactionSize(Name alias, Table<TransactionSizeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preprod.transaction_size</code> table reference
     */
    public TransactionSize(String alias) {
        this(DSL.name(alias), TRANSACTION_SIZE);
    }

    /**
     * Create an aliased <code>preprod.transaction_size</code> table reference
     */
    public TransactionSize(Name alias) {
        this(alias, TRANSACTION_SIZE);
    }

    /**
     * Create a <code>preprod.transaction_size</code> table reference
     */
    public TransactionSize() {
        this(DSL.name("transaction_size"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Preprod.PREPROD;
    }

    @Override
    public UniqueKey<TransactionSizeRecord> getPrimaryKey() {
        return Keys.TRANSACTION_SIZE_PKEY;
    }

    @Override
    public TransactionSize as(String alias) {
        return new TransactionSize(DSL.name(alias), this);
    }

    @Override
    public TransactionSize as(Name alias) {
        return new TransactionSize(alias, this);
    }

    @Override
    public TransactionSize as(Table<?> alias) {
        return new TransactionSize(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionSize rename(String name) {
        return new TransactionSize(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionSize rename(Name name) {
        return new TransactionSize(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionSize rename(Table<?> name) {
        return new TransactionSize(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionSize where(Condition condition) {
        return new TransactionSize(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionSize where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionSize where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionSize where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionSize where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionSize where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionSize where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionSize where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionSize whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionSize whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
