/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.cardanofoundation.rosetta.api.jooq.Keys;
import org.cardanofoundation.rosetta.api.jooq.Preprod;
import org.cardanofoundation.rosetta.api.jooq.tables.records.ErrorRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Error extends TableImpl<ErrorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod.error</code>
     */
    public static final Error ERROR = new Error();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ErrorRecord> getRecordType() {
        return ErrorRecord.class;
    }

    /**
     * The column <code>preprod.error.id</code>.
     */
    public final TableField<ErrorRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>preprod.error.block</code>.
     */
    public final TableField<ErrorRecord, Long> BLOCK = createField(DSL.name("block"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.error.error_code</code>.
     */
    public final TableField<ErrorRecord, String> ERROR_CODE = createField(DSL.name("error_code"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>preprod.error.reason</code>.
     */
    public final TableField<ErrorRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>preprod.error.details</code>.
     */
    public final TableField<ErrorRecord, String> DETAILS = createField(DSL.name("details"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>preprod.error.update_datetime</code>.
     */
    public final TableField<ErrorRecord, LocalDateTime> UPDATE_DATETIME = createField(DSL.name("update_datetime"), SQLDataType.LOCALDATETIME(6), this, "");

    private Error(Name alias, Table<ErrorRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Error(Name alias, Table<ErrorRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preprod.error</code> table reference
     */
    public Error(String alias) {
        this(DSL.name(alias), ERROR);
    }

    /**
     * Create an aliased <code>preprod.error</code> table reference
     */
    public Error(Name alias) {
        this(alias, ERROR);
    }

    /**
     * Create a <code>preprod.error</code> table reference
     */
    public Error() {
        this(DSL.name("error"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Preprod.PREPROD;
    }

    @Override
    public Identity<ErrorRecord, Integer> getIdentity() {
        return (Identity<ErrorRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ErrorRecord> getPrimaryKey() {
        return Keys.ERROR_PKEY;
    }

    @Override
    public Error as(String alias) {
        return new Error(DSL.name(alias), this);
    }

    @Override
    public Error as(Name alias) {
        return new Error(alias, this);
    }

    @Override
    public Error as(Table<?> alias) {
        return new Error(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Error rename(String name) {
        return new Error(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Error rename(Name name) {
        return new Error(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Error rename(Table<?> name) {
        return new Error(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Error where(Condition condition) {
        return new Error(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Error where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Error where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Error where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Error where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Error where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Error where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Error where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Error whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Error whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
