/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.cardanofoundation.rosetta.api.jooq.Indexes;
import org.cardanofoundation.rosetta.api.jooq.Keys;
import org.cardanofoundation.rosetta.api.jooq.Preprod;
import org.cardanofoundation.rosetta.api.jooq.tables.records.EpochParamRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EpochParam extends TableImpl<EpochParamRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod.epoch_param</code>
     */
    public static final EpochParam EPOCH_PARAM = new EpochParam();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EpochParamRecord> getRecordType() {
        return EpochParamRecord.class;
    }

    /**
     * The column <code>preprod.epoch_param.epoch</code>.
     */
    public final TableField<EpochParamRecord, Integer> EPOCH = createField(DSL.name("epoch"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>preprod.epoch_param.params</code>.
     */
    public final TableField<EpochParamRecord, JSONB> PARAMS = createField(DSL.name("params"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.epoch_param.cost_model_hash</code>.
     */
    public final TableField<EpochParamRecord, String> COST_MODEL_HASH = createField(DSL.name("cost_model_hash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.epoch_param.slot</code>.
     */
    public final TableField<EpochParamRecord, Long> SLOT = createField(DSL.name("slot"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.epoch_param.block</code>.
     */
    public final TableField<EpochParamRecord, Long> BLOCK = createField(DSL.name("block"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.epoch_param.block_time</code>.
     */
    public final TableField<EpochParamRecord, Long> BLOCK_TIME = createField(DSL.name("block_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.epoch_param.update_datetime</code>.
     */
    public final TableField<EpochParamRecord, LocalDateTime> UPDATE_DATETIME = createField(DSL.name("update_datetime"), SQLDataType.LOCALDATETIME(6), this, "");

    private EpochParam(Name alias, Table<EpochParamRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EpochParam(Name alias, Table<EpochParamRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preprod.epoch_param</code> table reference
     */
    public EpochParam(String alias) {
        this(DSL.name(alias), EPOCH_PARAM);
    }

    /**
     * Create an aliased <code>preprod.epoch_param</code> table reference
     */
    public EpochParam(Name alias) {
        this(alias, EPOCH_PARAM);
    }

    /**
     * Create a <code>preprod.epoch_param</code> table reference
     */
    public EpochParam() {
        this(DSL.name("epoch_param"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Preprod.PREPROD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_EPOCH_PARAM_SLOT);
    }

    @Override
    public UniqueKey<EpochParamRecord> getPrimaryKey() {
        return Keys.EPOCH_PARAM_PKEY;
    }

    @Override
    public EpochParam as(String alias) {
        return new EpochParam(DSL.name(alias), this);
    }

    @Override
    public EpochParam as(Name alias) {
        return new EpochParam(alias, this);
    }

    @Override
    public EpochParam as(Table<?> alias) {
        return new EpochParam(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EpochParam rename(String name) {
        return new EpochParam(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EpochParam rename(Name name) {
        return new EpochParam(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EpochParam rename(Table<?> name) {
        return new EpochParam(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EpochParam where(Condition condition) {
        return new EpochParam(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EpochParam where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EpochParam where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EpochParam where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EpochParam where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EpochParam where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EpochParam where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EpochParam where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EpochParam whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EpochParam whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
