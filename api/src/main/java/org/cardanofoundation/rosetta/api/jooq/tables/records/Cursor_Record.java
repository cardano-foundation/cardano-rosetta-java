/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables.records;


import java.time.LocalDateTime;

import org.cardanofoundation.rosetta.api.jooq.tables.Cursor_;
import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Cursor_Record extends UpdatableRecordImpl<Cursor_Record> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>preprod.cursor_.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>preprod.cursor_.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>preprod.cursor_.block_hash</code>.
     */
    public void setBlockHash(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>preprod.cursor_.block_hash</code>.
     */
    public String getBlockHash() {
        return (String) get(1);
    }

    /**
     * Setter for <code>preprod.cursor_.slot</code>.
     */
    public void setSlot(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>preprod.cursor_.slot</code>.
     */
    public Long getSlot() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>preprod.cursor_.block_number</code>.
     */
    public void setBlockNumber(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>preprod.cursor_.block_number</code>.
     */
    public Long getBlockNumber() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>preprod.cursor_.era</code>.
     */
    public void setEra(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>preprod.cursor_.era</code>.
     */
    public Integer getEra() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>preprod.cursor_.prev_block_hash</code>.
     */
    public void setPrevBlockHash(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>preprod.cursor_.prev_block_hash</code>.
     */
    public String getPrevBlockHash() {
        return (String) get(5);
    }

    /**
     * Setter for <code>preprod.cursor_.create_datetime</code>.
     */
    public void setCreateDatetime(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>preprod.cursor_.create_datetime</code>.
     */
    public LocalDateTime getCreateDatetime() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>preprod.cursor_.update_datetime</code>.
     */
    public void setUpdateDatetime(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>preprod.cursor_.update_datetime</code>.
     */
    public LocalDateTime getUpdateDatetime() {
        return (LocalDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached Cursor_Record
     */
    public Cursor_Record() {
        super(Cursor_.CURSOR_);
    }

    /**
     * Create a detached, initialised Cursor_Record
     */
    public Cursor_Record(Integer id, String blockHash, Long slot, Long blockNumber, Integer era, String prevBlockHash, LocalDateTime createDatetime, LocalDateTime updateDatetime) {
        super(Cursor_.CURSOR_);

        setId(id);
        setBlockHash(blockHash);
        setSlot(slot);
        setBlockNumber(blockNumber);
        setEra(era);
        setPrevBlockHash(prevBlockHash);
        setCreateDatetime(createDatetime);
        setUpdateDatetime(updateDatetime);
        resetChangedOnNotNull();
    }
}
