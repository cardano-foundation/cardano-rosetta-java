/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.cardanofoundation.rosetta.api.jooq.Indexes;
import org.cardanofoundation.rosetta.api.jooq.Keys;
import org.cardanofoundation.rosetta.api.jooq.Preprod;
import org.cardanofoundation.rosetta.api.jooq.tables.records.AddressUtxoRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AddressUtxo extends TableImpl<AddressUtxoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod.address_utxo</code>
     */
    public static final AddressUtxo ADDRESS_UTXO = new AddressUtxo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressUtxoRecord> getRecordType() {
        return AddressUtxoRecord.class;
    }

    /**
     * The column <code>preprod.address_utxo.tx_hash</code>.
     */
    public final TableField<AddressUtxoRecord, String> TX_HASH = createField(DSL.name("tx_hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>preprod.address_utxo.output_index</code>.
     */
    public final TableField<AddressUtxoRecord, Short> OUTPUT_INDEX = createField(DSL.name("output_index"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>preprod.address_utxo.slot</code>.
     */
    public final TableField<AddressUtxoRecord, Long> SLOT = createField(DSL.name("slot"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.address_utxo.block_hash</code>.
     */
    public final TableField<AddressUtxoRecord, String> BLOCK_HASH = createField(DSL.name("block_hash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.address_utxo.epoch</code>.
     */
    public final TableField<AddressUtxoRecord, Integer> EPOCH = createField(DSL.name("epoch"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>preprod.address_utxo.lovelace_amount</code>.
     */
    public final TableField<AddressUtxoRecord, Long> LOVELACE_AMOUNT = createField(DSL.name("lovelace_amount"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.address_utxo.amounts</code>.
     */
    public final TableField<AddressUtxoRecord, JSONB> AMOUNTS = createField(DSL.name("amounts"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.address_utxo.data_hash</code>.
     */
    public final TableField<AddressUtxoRecord, String> DATA_HASH = createField(DSL.name("data_hash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.address_utxo.inline_datum</code>.
     */
    public final TableField<AddressUtxoRecord, String> INLINE_DATUM = createField(DSL.name("inline_datum"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>preprod.address_utxo.owner_addr</code>.
     */
    public final TableField<AddressUtxoRecord, String> OWNER_ADDR = createField(DSL.name("owner_addr"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>preprod.address_utxo.owner_addr_full</code>.
     */
    public final TableField<AddressUtxoRecord, String> OWNER_ADDR_FULL = createField(DSL.name("owner_addr_full"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>preprod.address_utxo.owner_stake_addr</code>.
     */
    public final TableField<AddressUtxoRecord, String> OWNER_STAKE_ADDR = createField(DSL.name("owner_stake_addr"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>preprod.address_utxo.owner_payment_credential</code>.
     */
    public final TableField<AddressUtxoRecord, String> OWNER_PAYMENT_CREDENTIAL = createField(DSL.name("owner_payment_credential"), SQLDataType.VARCHAR(56), this, "");

    /**
     * The column <code>preprod.address_utxo.owner_stake_credential</code>.
     */
    public final TableField<AddressUtxoRecord, String> OWNER_STAKE_CREDENTIAL = createField(DSL.name("owner_stake_credential"), SQLDataType.VARCHAR(56), this, "");

    /**
     * The column <code>preprod.address_utxo.script_ref</code>.
     */
    public final TableField<AddressUtxoRecord, String> SCRIPT_REF = createField(DSL.name("script_ref"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>preprod.address_utxo.reference_script_hash</code>.
     */
    public final TableField<AddressUtxoRecord, String> REFERENCE_SCRIPT_HASH = createField(DSL.name("reference_script_hash"), SQLDataType.VARCHAR(56), this, "");

    /**
     * The column <code>preprod.address_utxo.is_collateral_return</code>.
     */
    public final TableField<AddressUtxoRecord, Boolean> IS_COLLATERAL_RETURN = createField(DSL.name("is_collateral_return"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>preprod.address_utxo.block</code>.
     */
    public final TableField<AddressUtxoRecord, Long> BLOCK = createField(DSL.name("block"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.address_utxo.block_time</code>.
     */
    public final TableField<AddressUtxoRecord, Long> BLOCK_TIME = createField(DSL.name("block_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.address_utxo.update_datetime</code>.
     */
    public final TableField<AddressUtxoRecord, LocalDateTime> UPDATE_DATETIME = createField(DSL.name("update_datetime"), SQLDataType.LOCALDATETIME(6), this, "");

    private AddressUtxo(Name alias, Table<AddressUtxoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AddressUtxo(Name alias, Table<AddressUtxoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preprod.address_utxo</code> table reference
     */
    public AddressUtxo(String alias) {
        this(DSL.name(alias), ADDRESS_UTXO);
    }

    /**
     * Create an aliased <code>preprod.address_utxo</code> table reference
     */
    public AddressUtxo(Name alias) {
        this(alias, ADDRESS_UTXO);
    }

    /**
     * Create a <code>preprod.address_utxo</code> table reference
     */
    public AddressUtxo() {
        this(DSL.name("address_utxo"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Preprod.PREPROD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_ADDRESS_UTXO_EPOCH, Indexes.IDX_ADDRESS_UTXO_OWNER_ADDR, Indexes.IDX_ADDRESS_UTXO_OWNER_PAYKEY_HASH, Indexes.IDX_ADDRESS_UTXO_OWNER_STAKE_ADDR, Indexes.IDX_ADDRESS_UTXO_OWNER_STAKEKEY_HASH, Indexes.IDX_ADDRESS_UTXO_SLOT, Indexes.IDX_ADDRESS_UTXO_TX_HASH, Indexes.IDX_REFERENCE_SCRIPT_HASH);
    }

    @Override
    public UniqueKey<AddressUtxoRecord> getPrimaryKey() {
        return Keys.ADDRESS_UTXO_PKEY;
    }

    @Override
    public AddressUtxo as(String alias) {
        return new AddressUtxo(DSL.name(alias), this);
    }

    @Override
    public AddressUtxo as(Name alias) {
        return new AddressUtxo(alias, this);
    }

    @Override
    public AddressUtxo as(Table<?> alias) {
        return new AddressUtxo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AddressUtxo rename(String name) {
        return new AddressUtxo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AddressUtxo rename(Name name) {
        return new AddressUtxo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AddressUtxo rename(Table<?> name) {
        return new AddressUtxo(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AddressUtxo where(Condition condition) {
        return new AddressUtxo(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AddressUtxo where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AddressUtxo where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AddressUtxo where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AddressUtxo where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AddressUtxo where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AddressUtxo where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AddressUtxo where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AddressUtxo whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AddressUtxo whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
