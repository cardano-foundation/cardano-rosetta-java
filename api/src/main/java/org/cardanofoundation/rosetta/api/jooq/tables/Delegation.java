/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.cardanofoundation.rosetta.api.jooq.Indexes;
import org.cardanofoundation.rosetta.api.jooq.Keys;
import org.cardanofoundation.rosetta.api.jooq.Preprod;
import org.cardanofoundation.rosetta.api.jooq.tables.records.DelegationRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Delegation extends TableImpl<DelegationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod.delegation</code>
     */
    public static final Delegation DELEGATION = new Delegation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DelegationRecord> getRecordType() {
        return DelegationRecord.class;
    }

    /**
     * The column <code>preprod.delegation.tx_hash</code>.
     */
    public final TableField<DelegationRecord, String> TX_HASH = createField(DSL.name("tx_hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>preprod.delegation.cert_index</code>.
     */
    public final TableField<DelegationRecord, Integer> CERT_INDEX = createField(DSL.name("cert_index"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>preprod.delegation.credential</code>.
     */
    public final TableField<DelegationRecord, String> CREDENTIAL = createField(DSL.name("credential"), SQLDataType.VARCHAR(56).nullable(false), this, "");

    /**
     * The column <code>preprod.delegation.pool_id</code>.
     */
    public final TableField<DelegationRecord, String> POOL_ID = createField(DSL.name("pool_id"), SQLDataType.VARCHAR(56), this, "");

    /**
     * The column <code>preprod.delegation.address</code>.
     */
    public final TableField<DelegationRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>preprod.delegation.epoch</code>.
     */
    public final TableField<DelegationRecord, Integer> EPOCH = createField(DSL.name("epoch"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>preprod.delegation.slot</code>.
     */
    public final TableField<DelegationRecord, Long> SLOT = createField(DSL.name("slot"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.delegation.block_hash</code>.
     */
    public final TableField<DelegationRecord, String> BLOCK_HASH = createField(DSL.name("block_hash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.delegation.block</code>.
     */
    public final TableField<DelegationRecord, Long> BLOCK = createField(DSL.name("block"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.delegation.block_time</code>.
     */
    public final TableField<DelegationRecord, Long> BLOCK_TIME = createField(DSL.name("block_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.delegation.update_datetime</code>.
     */
    public final TableField<DelegationRecord, LocalDateTime> UPDATE_DATETIME = createField(DSL.name("update_datetime"), SQLDataType.LOCALDATETIME(6), this, "");

    private Delegation(Name alias, Table<DelegationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Delegation(Name alias, Table<DelegationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preprod.delegation</code> table reference
     */
    public Delegation(String alias) {
        this(DSL.name(alias), DELEGATION);
    }

    /**
     * Create an aliased <code>preprod.delegation</code> table reference
     */
    public Delegation(Name alias) {
        this(alias, DELEGATION);
    }

    /**
     * Create a <code>preprod.delegation</code> table reference
     */
    public Delegation() {
        this(DSL.name("delegation"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Preprod.PREPROD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_DELEGATION_ADDRESS, Indexes.IDX_DELEGATION_CREDENTIAL, Indexes.IDX_DELEGATION_SLOT, Indexes.IDX_DELEGATION_TXHASH);
    }

    @Override
    public UniqueKey<DelegationRecord> getPrimaryKey() {
        return Keys.DELEGATION_PKEY;
    }

    @Override
    public Delegation as(String alias) {
        return new Delegation(DSL.name(alias), this);
    }

    @Override
    public Delegation as(Name alias) {
        return new Delegation(alias, this);
    }

    @Override
    public Delegation as(Table<?> alias) {
        return new Delegation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Delegation rename(String name) {
        return new Delegation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Delegation rename(Name name) {
        return new Delegation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Delegation rename(Table<?> name) {
        return new Delegation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Delegation where(Condition condition) {
        return new Delegation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Delegation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Delegation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Delegation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Delegation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Delegation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Delegation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Delegation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Delegation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Delegation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
