/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.cardanofoundation.rosetta.api.jooq.Keys;
import org.cardanofoundation.rosetta.api.jooq.Preprod;
import org.cardanofoundation.rosetta.api.jooq.tables.records.CostModelRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CostModel extends TableImpl<CostModelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod.cost_model</code>
     */
    public static final CostModel COST_MODEL = new CostModel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CostModelRecord> getRecordType() {
        return CostModelRecord.class;
    }

    /**
     * The column <code>preprod.cost_model.hash</code>.
     */
    public final TableField<CostModelRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>preprod.cost_model.costs</code>.
     */
    public final TableField<CostModelRecord, JSONB> COSTS = createField(DSL.name("costs"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.cost_model.slot</code>.
     */
    public final TableField<CostModelRecord, Long> SLOT = createField(DSL.name("slot"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.cost_model.block</code>.
     */
    public final TableField<CostModelRecord, Long> BLOCK = createField(DSL.name("block"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.cost_model.block_time</code>.
     */
    public final TableField<CostModelRecord, Long> BLOCK_TIME = createField(DSL.name("block_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.cost_model.update_datetime</code>.
     */
    public final TableField<CostModelRecord, LocalDateTime> UPDATE_DATETIME = createField(DSL.name("update_datetime"), SQLDataType.LOCALDATETIME(6), this, "");

    private CostModel(Name alias, Table<CostModelRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CostModel(Name alias, Table<CostModelRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preprod.cost_model</code> table reference
     */
    public CostModel(String alias) {
        this(DSL.name(alias), COST_MODEL);
    }

    /**
     * Create an aliased <code>preprod.cost_model</code> table reference
     */
    public CostModel(Name alias) {
        this(alias, COST_MODEL);
    }

    /**
     * Create a <code>preprod.cost_model</code> table reference
     */
    public CostModel() {
        this(DSL.name("cost_model"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Preprod.PREPROD;
    }

    @Override
    public UniqueKey<CostModelRecord> getPrimaryKey() {
        return Keys.COST_MODEL_PKEY;
    }

    @Override
    public CostModel as(String alias) {
        return new CostModel(DSL.name(alias), this);
    }

    @Override
    public CostModel as(Name alias) {
        return new CostModel(alias, this);
    }

    @Override
    public CostModel as(Table<?> alias) {
        return new CostModel(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CostModel rename(String name) {
        return new CostModel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CostModel rename(Name name) {
        return new CostModel(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CostModel rename(Table<?> name) {
        return new CostModel(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CostModel where(Condition condition) {
        return new CostModel(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CostModel where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CostModel where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CostModel where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CostModel where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CostModel where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CostModel where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CostModel where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CostModel whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CostModel whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
