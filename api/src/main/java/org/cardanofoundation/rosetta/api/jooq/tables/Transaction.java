/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.cardanofoundation.rosetta.api.jooq.Indexes;
import org.cardanofoundation.rosetta.api.jooq.Keys;
import org.cardanofoundation.rosetta.api.jooq.Preprod;
import org.cardanofoundation.rosetta.api.jooq.tables.records.TransactionRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Transaction extends TableImpl<TransactionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod.transaction</code>
     */
    public static final Transaction TRANSACTION = new Transaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionRecord> getRecordType() {
        return TransactionRecord.class;
    }

    /**
     * The column <code>preprod.transaction.tx_hash</code>.
     */
    public final TableField<TransactionRecord, String> TX_HASH = createField(DSL.name("tx_hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>preprod.transaction.auxiliary_datahash</code>.
     */
    public final TableField<TransactionRecord, String> AUXILIARY_DATAHASH = createField(DSL.name("auxiliary_datahash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.transaction.block_hash</code>.
     */
    public final TableField<TransactionRecord, String> BLOCK_HASH = createField(DSL.name("block_hash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.transaction.collateral_inputs</code>.
     */
    public final TableField<TransactionRecord, JSONB> COLLATERAL_INPUTS = createField(DSL.name("collateral_inputs"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.transaction.collateral_return</code>.
     */
    public final TableField<TransactionRecord, JSONB> COLLATERAL_RETURN = createField(DSL.name("collateral_return"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.transaction.fee</code>.
     */
    public final TableField<TransactionRecord, Long> FEE = createField(DSL.name("fee"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.transaction.inputs</code>.
     */
    public final TableField<TransactionRecord, JSONB> INPUTS = createField(DSL.name("inputs"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.transaction.invalid</code>.
     */
    public final TableField<TransactionRecord, Boolean> INVALID = createField(DSL.name("invalid"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>preprod.transaction.network_id</code>.
     */
    public final TableField<TransactionRecord, Short> NETWORK_ID = createField(DSL.name("network_id"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>preprod.transaction.outputs</code>.
     */
    public final TableField<TransactionRecord, JSONB> OUTPUTS = createField(DSL.name("outputs"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.transaction.reference_inputs</code>.
     */
    public final TableField<TransactionRecord, JSONB> REFERENCE_INPUTS = createField(DSL.name("reference_inputs"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.transaction.required_signers</code>.
     */
    public final TableField<TransactionRecord, JSONB> REQUIRED_SIGNERS = createField(DSL.name("required_signers"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.transaction.script_datahash</code>.
     */
    public final TableField<TransactionRecord, String> SCRIPT_DATAHASH = createField(DSL.name("script_datahash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.transaction.slot</code>.
     */
    public final TableField<TransactionRecord, Long> SLOT = createField(DSL.name("slot"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.transaction.total_collateral</code>.
     */
    public final TableField<TransactionRecord, Long> TOTAL_COLLATERAL = createField(DSL.name("total_collateral"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.transaction.ttl</code>.
     */
    public final TableField<TransactionRecord, Long> TTL = createField(DSL.name("ttl"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.transaction.validity_interval_start</code>.
     */
    public final TableField<TransactionRecord, Long> VALIDITY_INTERVAL_START = createField(DSL.name("validity_interval_start"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.transaction.collateral_return_json</code>.
     */
    public final TableField<TransactionRecord, JSONB> COLLATERAL_RETURN_JSON = createField(DSL.name("collateral_return_json"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.transaction.block</code>.
     */
    public final TableField<TransactionRecord, Long> BLOCK = createField(DSL.name("block"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.transaction.block_time</code>.
     */
    public final TableField<TransactionRecord, Long> BLOCK_TIME = createField(DSL.name("block_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.transaction.update_datetime</code>.
     */
    public final TableField<TransactionRecord, LocalDateTime> UPDATE_DATETIME = createField(DSL.name("update_datetime"), SQLDataType.LOCALDATETIME(6), this, "");

    private Transaction(Name alias, Table<TransactionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Transaction(Name alias, Table<TransactionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preprod.transaction</code> table reference
     */
    public Transaction(String alias) {
        this(DSL.name(alias), TRANSACTION);
    }

    /**
     * Create an aliased <code>preprod.transaction</code> table reference
     */
    public Transaction(Name alias) {
        this(alias, TRANSACTION);
    }

    /**
     * Create a <code>preprod.transaction</code> table reference
     */
    public Transaction() {
        this(DSL.name("transaction"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Preprod.PREPROD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TRANSACTION_BLOCK, Indexes.IDX_TRANSACTION_BLOCK_HASH, Indexes.IDX_TRANSACTION_SLOT);
    }

    @Override
    public UniqueKey<TransactionRecord> getPrimaryKey() {
        return Keys.TRANSACTION_PKEY;
    }

    @Override
    public Transaction as(String alias) {
        return new Transaction(DSL.name(alias), this);
    }

    @Override
    public Transaction as(Name alias) {
        return new Transaction(alias, this);
    }

    @Override
    public Transaction as(Table<?> alias) {
        return new Transaction(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(String name) {
        return new Transaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(Name name) {
        return new Transaction(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(Table<?> name) {
        return new Transaction(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction where(Condition condition) {
        return new Transaction(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transaction where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transaction where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transaction where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transaction where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
