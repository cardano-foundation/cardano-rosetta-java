/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.cardanofoundation.rosetta.api.jooq.Keys;
import org.cardanofoundation.rosetta.api.jooq.Preprod;
import org.cardanofoundation.rosetta.api.jooq.tables.records.RollbackRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Rollback extends TableImpl<RollbackRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod.rollback</code>
     */
    public static final Rollback ROLLBACK = new Rollback();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RollbackRecord> getRecordType() {
        return RollbackRecord.class;
    }

    /**
     * The column <code>preprod.rollback.id</code>.
     */
    public final TableField<RollbackRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>preprod.rollback.rollback_to_block_hash</code>.
     */
    public final TableField<RollbackRecord, String> ROLLBACK_TO_BLOCK_HASH = createField(DSL.name("rollback_to_block_hash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.rollback.rollback_to_slot</code>.
     */
    public final TableField<RollbackRecord, Long> ROLLBACK_TO_SLOT = createField(DSL.name("rollback_to_slot"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.rollback.current_block_hash</code>.
     */
    public final TableField<RollbackRecord, String> CURRENT_BLOCK_HASH = createField(DSL.name("current_block_hash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.rollback.current_slot</code>.
     */
    public final TableField<RollbackRecord, Long> CURRENT_SLOT = createField(DSL.name("current_slot"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.rollback.current_block</code>.
     */
    public final TableField<RollbackRecord, Long> CURRENT_BLOCK = createField(DSL.name("current_block"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.rollback.create_datetime</code>.
     */
    public final TableField<RollbackRecord, LocalDateTime> CREATE_DATETIME = createField(DSL.name("create_datetime"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>preprod.rollback.update_datetime</code>.
     */
    public final TableField<RollbackRecord, LocalDateTime> UPDATE_DATETIME = createField(DSL.name("update_datetime"), SQLDataType.LOCALDATETIME(6), this, "");

    private Rollback(Name alias, Table<RollbackRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Rollback(Name alias, Table<RollbackRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preprod.rollback</code> table reference
     */
    public Rollback(String alias) {
        this(DSL.name(alias), ROLLBACK);
    }

    /**
     * Create an aliased <code>preprod.rollback</code> table reference
     */
    public Rollback(Name alias) {
        this(alias, ROLLBACK);
    }

    /**
     * Create a <code>preprod.rollback</code> table reference
     */
    public Rollback() {
        this(DSL.name("rollback"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Preprod.PREPROD;
    }

    @Override
    public Identity<RollbackRecord, Long> getIdentity() {
        return (Identity<RollbackRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RollbackRecord> getPrimaryKey() {
        return Keys.ROLLBACK_PKEY;
    }

    @Override
    public Rollback as(String alias) {
        return new Rollback(DSL.name(alias), this);
    }

    @Override
    public Rollback as(Name alias) {
        return new Rollback(alias, this);
    }

    @Override
    public Rollback as(Table<?> alias) {
        return new Rollback(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rollback rename(String name) {
        return new Rollback(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rollback rename(Name name) {
        return new Rollback(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rollback rename(Table<?> name) {
        return new Rollback(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rollback where(Condition condition) {
        return new Rollback(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rollback where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rollback where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rollback where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Rollback where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Rollback where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Rollback where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Rollback where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rollback whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rollback whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
