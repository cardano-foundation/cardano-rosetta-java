/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq;


import java.util.Arrays;
import java.util.List;

import org.cardanofoundation.rosetta.api.jooq.tables.Address;
import org.cardanofoundation.rosetta.api.jooq.tables.AddressUtxo;
import org.cardanofoundation.rosetta.api.jooq.tables.Block;
import org.cardanofoundation.rosetta.api.jooq.tables.CostModel;
import org.cardanofoundation.rosetta.api.jooq.tables.Cursor_;
import org.cardanofoundation.rosetta.api.jooq.tables.Delegation;
import org.cardanofoundation.rosetta.api.jooq.tables.EpochParam;
import org.cardanofoundation.rosetta.api.jooq.tables.Era;
import org.cardanofoundation.rosetta.api.jooq.tables.Error;
import org.cardanofoundation.rosetta.api.jooq.tables.ErrorReview;
import org.cardanofoundation.rosetta.api.jooq.tables.FlywaySchemaHistory;
import org.cardanofoundation.rosetta.api.jooq.tables.InvalidTransaction;
import org.cardanofoundation.rosetta.api.jooq.tables.LocalEpochParam;
import org.cardanofoundation.rosetta.api.jooq.tables.PoolRegistration;
import org.cardanofoundation.rosetta.api.jooq.tables.PoolRetirement;
import org.cardanofoundation.rosetta.api.jooq.tables.ProtocolParamsProposal;
import org.cardanofoundation.rosetta.api.jooq.tables.Rollback;
import org.cardanofoundation.rosetta.api.jooq.tables.StakeRegistration;
import org.cardanofoundation.rosetta.api.jooq.tables.Transaction;
import org.cardanofoundation.rosetta.api.jooq.tables.TransactionSize;
import org.cardanofoundation.rosetta.api.jooq.tables.TransactionWitness;
import org.cardanofoundation.rosetta.api.jooq.tables.TxInput;
import org.cardanofoundation.rosetta.api.jooq.tables.Withdrawal;
import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Preprod extends SchemaImpl {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod</code>
     */
    public static final Preprod PREPROD = new Preprod();

    /**
     * The table <code>preprod.address</code>.
     */
    public final Address ADDRESS = Address.ADDRESS;

    /**
     * The table <code>preprod.address_utxo</code>.
     */
    public final AddressUtxo ADDRESS_UTXO = AddressUtxo.ADDRESS_UTXO;

    /**
     * The table <code>preprod.block</code>.
     */
    public final Block BLOCK = Block.BLOCK;

    /**
     * The table <code>preprod.cost_model</code>.
     */
    public final CostModel COST_MODEL = CostModel.COST_MODEL;

    /**
     * The table <code>preprod.cursor_</code>.
     */
    public final Cursor_ CURSOR_ = Cursor_.CURSOR_;

    /**
     * The table <code>preprod.delegation</code>.
     */
    public final Delegation DELEGATION = Delegation.DELEGATION;

    /**
     * The table <code>preprod.epoch_param</code>.
     */
    public final EpochParam EPOCH_PARAM = EpochParam.EPOCH_PARAM;

    /**
     * The table <code>preprod.era</code>.
     */
    public final Era ERA = Era.ERA;

    /**
     * The table <code>preprod.error</code>.
     */
    public final Error ERROR = Error.ERROR;

    /**
     * The table <code>preprod.error_review</code>.
     */
    public final ErrorReview ERROR_REVIEW = ErrorReview.ERROR_REVIEW;

    /**
     * The table <code>preprod.flyway_schema_history</code>.
     */
    public final FlywaySchemaHistory FLYWAY_SCHEMA_HISTORY = FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY;

    /**
     * The table <code>preprod.invalid_transaction</code>.
     */
    public final InvalidTransaction INVALID_TRANSACTION = InvalidTransaction.INVALID_TRANSACTION;

    /**
     * The table <code>preprod.local_epoch_param</code>.
     */
    public final LocalEpochParam LOCAL_EPOCH_PARAM = LocalEpochParam.LOCAL_EPOCH_PARAM;

    /**
     * The table <code>preprod.pool_registration</code>.
     */
    public final PoolRegistration POOL_REGISTRATION = PoolRegistration.POOL_REGISTRATION;

    /**
     * The table <code>preprod.pool_retirement</code>.
     */
    public final PoolRetirement POOL_RETIREMENT = PoolRetirement.POOL_RETIREMENT;

    /**
     * The table <code>preprod.protocol_params_proposal</code>.
     */
    public final ProtocolParamsProposal PROTOCOL_PARAMS_PROPOSAL = ProtocolParamsProposal.PROTOCOL_PARAMS_PROPOSAL;

    /**
     * The table <code>preprod.rollback</code>.
     */
    public final Rollback ROLLBACK = Rollback.ROLLBACK;

    /**
     * The table <code>preprod.stake_registration</code>.
     */
    public final StakeRegistration STAKE_REGISTRATION = StakeRegistration.STAKE_REGISTRATION;

    /**
     * The table <code>preprod.transaction</code>.
     */
    public final Transaction TRANSACTION = Transaction.TRANSACTION;

    /**
     * The table <code>preprod.transaction_size</code>.
     */
    public final TransactionSize TRANSACTION_SIZE = TransactionSize.TRANSACTION_SIZE;

    /**
     * The table <code>preprod.transaction_witness</code>.
     */
    public final TransactionWitness TRANSACTION_WITNESS = TransactionWitness.TRANSACTION_WITNESS;

    /**
     * The table <code>preprod.tx_input</code>.
     */
    public final TxInput TX_INPUT = TxInput.TX_INPUT;

    /**
     * The table <code>preprod.withdrawal</code>.
     */
    public final Withdrawal WITHDRAWAL = Withdrawal.WITHDRAWAL;

    /**
     * No further instances allowed
     */
    private Preprod() {
        super("preprod", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.asList(
            Address.ADDRESS,
            AddressUtxo.ADDRESS_UTXO,
            Block.BLOCK,
            CostModel.COST_MODEL,
            Cursor_.CURSOR_,
            Delegation.DELEGATION,
            EpochParam.EPOCH_PARAM,
            Era.ERA,
            Error.ERROR,
            ErrorReview.ERROR_REVIEW,
            FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY,
            InvalidTransaction.INVALID_TRANSACTION,
            LocalEpochParam.LOCAL_EPOCH_PARAM,
            PoolRegistration.POOL_REGISTRATION,
            PoolRetirement.POOL_RETIREMENT,
            ProtocolParamsProposal.PROTOCOL_PARAMS_PROPOSAL,
            Rollback.ROLLBACK,
            StakeRegistration.STAKE_REGISTRATION,
            Transaction.TRANSACTION,
            TransactionSize.TRANSACTION_SIZE,
            TransactionWitness.TRANSACTION_WITNESS,
            TxInput.TX_INPUT,
            Withdrawal.WITHDRAWAL
        );
    }
}
