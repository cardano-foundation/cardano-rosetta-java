/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.cardanofoundation.rosetta.api.jooq.Indexes;
import org.cardanofoundation.rosetta.api.jooq.Keys;
import org.cardanofoundation.rosetta.api.jooq.Preprod;
import org.cardanofoundation.rosetta.api.jooq.tables.records.TransactionWitnessRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TransactionWitness extends TableImpl<TransactionWitnessRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod.transaction_witness</code>
     */
    public static final TransactionWitness TRANSACTION_WITNESS = new TransactionWitness();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionWitnessRecord> getRecordType() {
        return TransactionWitnessRecord.class;
    }

    /**
     * The column <code>preprod.transaction_witness.tx_hash</code>.
     */
    public final TableField<TransactionWitnessRecord, String> TX_HASH = createField(DSL.name("tx_hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>preprod.transaction_witness.idx</code>.
     */
    public final TableField<TransactionWitnessRecord, Integer> IDX = createField(DSL.name("idx"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>preprod.transaction_witness.pub_key</code>.
     */
    public final TableField<TransactionWitnessRecord, String> PUB_KEY = createField(DSL.name("pub_key"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>preprod.transaction_witness.signature</code>.
     */
    public final TableField<TransactionWitnessRecord, String> SIGNATURE = createField(DSL.name("signature"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>preprod.transaction_witness.pub_keyhash</code>.
     */
    public final TableField<TransactionWitnessRecord, String> PUB_KEYHASH = createField(DSL.name("pub_keyhash"), SQLDataType.VARCHAR(56), this, "");

    /**
     * The column <code>preprod.transaction_witness.type</code>.
     */
    public final TableField<TransactionWitnessRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>preprod.transaction_witness.additional_data</code>.
     */
    public final TableField<TransactionWitnessRecord, JSONB> ADDITIONAL_DATA = createField(DSL.name("additional_data"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>preprod.transaction_witness.slot</code>.
     */
    public final TableField<TransactionWitnessRecord, Long> SLOT = createField(DSL.name("slot"), SQLDataType.BIGINT, this, "");

    private TransactionWitness(Name alias, Table<TransactionWitnessRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TransactionWitness(Name alias, Table<TransactionWitnessRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preprod.transaction_witness</code> table
     * reference
     */
    public TransactionWitness(String alias) {
        this(DSL.name(alias), TRANSACTION_WITNESS);
    }

    /**
     * Create an aliased <code>preprod.transaction_witness</code> table
     * reference
     */
    public TransactionWitness(Name alias) {
        this(alias, TRANSACTION_WITNESS);
    }

    /**
     * Create a <code>preprod.transaction_witness</code> table reference
     */
    public TransactionWitness() {
        this(DSL.name("transaction_witness"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Preprod.PREPROD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TRANSACTION_WITNESS_SLOT, Indexes.IDX_TRANSACTION_WITNESS_TX_HASH);
    }

    @Override
    public UniqueKey<TransactionWitnessRecord> getPrimaryKey() {
        return Keys.TRANSACTION_WITNESS_PKEY;
    }

    @Override
    public TransactionWitness as(String alias) {
        return new TransactionWitness(DSL.name(alias), this);
    }

    @Override
    public TransactionWitness as(Name alias) {
        return new TransactionWitness(alias, this);
    }

    @Override
    public TransactionWitness as(Table<?> alias) {
        return new TransactionWitness(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionWitness rename(String name) {
        return new TransactionWitness(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionWitness rename(Name name) {
        return new TransactionWitness(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionWitness rename(Table<?> name) {
        return new TransactionWitness(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionWitness where(Condition condition) {
        return new TransactionWitness(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionWitness where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionWitness where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionWitness where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionWitness where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionWitness where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionWitness where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionWitness where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionWitness whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionWitness whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
