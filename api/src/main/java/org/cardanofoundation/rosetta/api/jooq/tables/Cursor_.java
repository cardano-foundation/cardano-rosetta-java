/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.cardanofoundation.rosetta.api.jooq.Indexes;
import org.cardanofoundation.rosetta.api.jooq.Keys;
import org.cardanofoundation.rosetta.api.jooq.Preprod;
import org.cardanofoundation.rosetta.api.jooq.tables.records.Cursor_Record;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Cursor_ extends TableImpl<Cursor_Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod.cursor_</code>
     */
    public static final Cursor_ CURSOR_ = new Cursor_();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Cursor_Record> getRecordType() {
        return Cursor_Record.class;
    }

    /**
     * The column <code>preprod.cursor_.id</code>.
     */
    public final TableField<Cursor_Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>preprod.cursor_.block_hash</code>.
     */
    public final TableField<Cursor_Record, String> BLOCK_HASH = createField(DSL.name("block_hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>preprod.cursor_.slot</code>.
     */
    public final TableField<Cursor_Record, Long> SLOT = createField(DSL.name("slot"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.cursor_.block_number</code>.
     */
    public final TableField<Cursor_Record, Long> BLOCK_NUMBER = createField(DSL.name("block_number"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.cursor_.era</code>.
     */
    public final TableField<Cursor_Record, Integer> ERA = createField(DSL.name("era"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>preprod.cursor_.prev_block_hash</code>.
     */
    public final TableField<Cursor_Record, String> PREV_BLOCK_HASH = createField(DSL.name("prev_block_hash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.cursor_.create_datetime</code>.
     */
    public final TableField<Cursor_Record, LocalDateTime> CREATE_DATETIME = createField(DSL.name("create_datetime"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>preprod.cursor_.update_datetime</code>.
     */
    public final TableField<Cursor_Record, LocalDateTime> UPDATE_DATETIME = createField(DSL.name("update_datetime"), SQLDataType.LOCALDATETIME(6), this, "");

    private Cursor_(Name alias, Table<Cursor_Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Cursor_(Name alias, Table<Cursor_Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preprod.cursor_</code> table reference
     */
    public Cursor_(String alias) {
        this(DSL.name(alias), CURSOR_);
    }

    /**
     * Create an aliased <code>preprod.cursor_</code> table reference
     */
    public Cursor_(Name alias) {
        this(alias, CURSOR_);
    }

    /**
     * Create a <code>preprod.cursor_</code> table reference
     */
    public Cursor_() {
        this(DSL.name("cursor_"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Preprod.PREPROD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_CURSOR_BLOCK_HASH, Indexes.IDX_CURSOR_BLOCK_NUMBER, Indexes.IDX_CURSOR_ID, Indexes.IDX_CURSOR_SLOT);
    }

    @Override
    public UniqueKey<Cursor_Record> getPrimaryKey() {
        return Keys.CURSOR__PKEY;
    }

    @Override
    public Cursor_ as(String alias) {
        return new Cursor_(DSL.name(alias), this);
    }

    @Override
    public Cursor_ as(Name alias) {
        return new Cursor_(alias, this);
    }

    @Override
    public Cursor_ as(Table<?> alias) {
        return new Cursor_(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cursor_ rename(String name) {
        return new Cursor_(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cursor_ rename(Name name) {
        return new Cursor_(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cursor_ rename(Table<?> name) {
        return new Cursor_(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cursor_ where(Condition condition) {
        return new Cursor_(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cursor_ where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cursor_ where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cursor_ where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cursor_ where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cursor_ where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cursor_ where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Cursor_ where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cursor_ whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Cursor_ whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
