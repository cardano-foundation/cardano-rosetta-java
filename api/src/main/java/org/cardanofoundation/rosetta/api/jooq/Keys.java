/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq;


import org.cardanofoundation.rosetta.api.jooq.tables.Address;
import org.cardanofoundation.rosetta.api.jooq.tables.AddressUtxo;
import org.cardanofoundation.rosetta.api.jooq.tables.Block;
import org.cardanofoundation.rosetta.api.jooq.tables.CostModel;
import org.cardanofoundation.rosetta.api.jooq.tables.Cursor_;
import org.cardanofoundation.rosetta.api.jooq.tables.Delegation;
import org.cardanofoundation.rosetta.api.jooq.tables.EpochParam;
import org.cardanofoundation.rosetta.api.jooq.tables.Era;
import org.cardanofoundation.rosetta.api.jooq.tables.Error;
import org.cardanofoundation.rosetta.api.jooq.tables.ErrorReview;
import org.cardanofoundation.rosetta.api.jooq.tables.FlywaySchemaHistory;
import org.cardanofoundation.rosetta.api.jooq.tables.InvalidTransaction;
import org.cardanofoundation.rosetta.api.jooq.tables.LocalEpochParam;
import org.cardanofoundation.rosetta.api.jooq.tables.PoolRegistration;
import org.cardanofoundation.rosetta.api.jooq.tables.PoolRetirement;
import org.cardanofoundation.rosetta.api.jooq.tables.ProtocolParamsProposal;
import org.cardanofoundation.rosetta.api.jooq.tables.Rollback;
import org.cardanofoundation.rosetta.api.jooq.tables.StakeRegistration;
import org.cardanofoundation.rosetta.api.jooq.tables.Transaction;
import org.cardanofoundation.rosetta.api.jooq.tables.TransactionSize;
import org.cardanofoundation.rosetta.api.jooq.tables.TransactionWitness;
import org.cardanofoundation.rosetta.api.jooq.tables.TxInput;
import org.cardanofoundation.rosetta.api.jooq.tables.Withdrawal;
import org.cardanofoundation.rosetta.api.jooq.tables.records.AddressRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.AddressUtxoRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.BlockRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.CostModelRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.Cursor_Record;
import org.cardanofoundation.rosetta.api.jooq.tables.records.DelegationRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.EpochParamRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.EraRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.ErrorRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.ErrorReviewRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.FlywaySchemaHistoryRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.InvalidTransactionRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.LocalEpochParamRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.PoolRegistrationRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.PoolRetirementRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.ProtocolParamsProposalRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.RollbackRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.StakeRegistrationRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.TransactionRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.TransactionSizeRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.TransactionWitnessRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.TxInputRecord;
import org.cardanofoundation.rosetta.api.jooq.tables.records.WithdrawalRecord;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * preprod.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AddressRecord> ADDRESS_ADDRESS_KEY = Internal.createUniqueKey(Address.ADDRESS, DSL.name("address_address_key"), new TableField[] { Address.ADDRESS.ADDRESS_ }, true);
    public static final UniqueKey<AddressRecord> ADDRESS_PKEY = Internal.createUniqueKey(Address.ADDRESS, DSL.name("address_pkey"), new TableField[] { Address.ADDRESS.ID }, true);
    public static final UniqueKey<AddressUtxoRecord> ADDRESS_UTXO_PKEY = Internal.createUniqueKey(AddressUtxo.ADDRESS_UTXO, DSL.name("address_utxo_pkey"), new TableField[] { AddressUtxo.ADDRESS_UTXO.OUTPUT_INDEX, AddressUtxo.ADDRESS_UTXO.TX_HASH }, true);
    public static final UniqueKey<BlockRecord> BLOCK_PKEY = Internal.createUniqueKey(Block.BLOCK, DSL.name("block_pkey"), new TableField[] { Block.BLOCK.HASH }, true);
    public static final UniqueKey<CostModelRecord> COST_MODEL_PKEY = Internal.createUniqueKey(CostModel.COST_MODEL, DSL.name("cost_model_pkey"), new TableField[] { CostModel.COST_MODEL.HASH }, true);
    public static final UniqueKey<Cursor_Record> CURSOR__PKEY = Internal.createUniqueKey(Cursor_.CURSOR_, DSL.name("cursor__pkey"), new TableField[] { Cursor_.CURSOR_.ID, Cursor_.CURSOR_.BLOCK_HASH }, true);
    public static final UniqueKey<DelegationRecord> DELEGATION_PKEY = Internal.createUniqueKey(Delegation.DELEGATION, DSL.name("delegation_pkey"), new TableField[] { Delegation.DELEGATION.TX_HASH, Delegation.DELEGATION.CERT_INDEX }, true);
    public static final UniqueKey<EpochParamRecord> EPOCH_PARAM_PKEY = Internal.createUniqueKey(EpochParam.EPOCH_PARAM, DSL.name("epoch_param_pkey"), new TableField[] { EpochParam.EPOCH_PARAM.EPOCH }, true);
    public static final UniqueKey<EraRecord> ERA_PKEY = Internal.createUniqueKey(Era.ERA, DSL.name("era_pkey"), new TableField[] { Era.ERA.ERA_ }, true);
    public static final UniqueKey<ErrorRecord> ERROR_PKEY = Internal.createUniqueKey(Error.ERROR, DSL.name("error_pkey"), new TableField[] { Error.ERROR.ID }, true);
    public static final UniqueKey<ErrorReviewRecord> ERROR_REVIEW_PKEY = Internal.createUniqueKey(ErrorReview.ERROR_REVIEW, DSL.name("error_review_pkey"), new TableField[] { ErrorReview.ERROR_REVIEW.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<InvalidTransactionRecord> INVALID_TRANSACTION_PKEY = Internal.createUniqueKey(InvalidTransaction.INVALID_TRANSACTION, DSL.name("invalid_transaction_pkey"), new TableField[] { InvalidTransaction.INVALID_TRANSACTION.TX_HASH }, true);
    public static final UniqueKey<LocalEpochParamRecord> LOCAL_EPOCH_PARAM_PKEY = Internal.createUniqueKey(LocalEpochParam.LOCAL_EPOCH_PARAM, DSL.name("local_epoch_param_pkey"), new TableField[] { LocalEpochParam.LOCAL_EPOCH_PARAM.EPOCH }, true);
    public static final UniqueKey<PoolRegistrationRecord> POOL_REGISTRATION_PKEY = Internal.createUniqueKey(PoolRegistration.POOL_REGISTRATION, DSL.name("pool_registration_pkey"), new TableField[] { PoolRegistration.POOL_REGISTRATION.TX_HASH, PoolRegistration.POOL_REGISTRATION.CERT_INDEX }, true);
    public static final UniqueKey<PoolRetirementRecord> POOL_RETIREMENT_PKEY = Internal.createUniqueKey(PoolRetirement.POOL_RETIREMENT, DSL.name("pool_retirement_pkey"), new TableField[] { PoolRetirement.POOL_RETIREMENT.TX_HASH, PoolRetirement.POOL_RETIREMENT.CERT_INDEX }, true);
    public static final UniqueKey<ProtocolParamsProposalRecord> PROTOCOL_PARAMS_PROPOSAL_PKEY = Internal.createUniqueKey(ProtocolParamsProposal.PROTOCOL_PARAMS_PROPOSAL, DSL.name("protocol_params_proposal_pkey"), new TableField[] { ProtocolParamsProposal.PROTOCOL_PARAMS_PROPOSAL.TX_HASH, ProtocolParamsProposal.PROTOCOL_PARAMS_PROPOSAL.KEY_HASH }, true);
    public static final UniqueKey<RollbackRecord> ROLLBACK_PKEY = Internal.createUniqueKey(Rollback.ROLLBACK, DSL.name("rollback_pkey"), new TableField[] { Rollback.ROLLBACK.ID }, true);
    public static final UniqueKey<StakeRegistrationRecord> STAKE_REGISTRATION_PKEY = Internal.createUniqueKey(StakeRegistration.STAKE_REGISTRATION, DSL.name("stake_registration_pkey"), new TableField[] { StakeRegistration.STAKE_REGISTRATION.TX_HASH, StakeRegistration.STAKE_REGISTRATION.CERT_INDEX }, true);
    public static final UniqueKey<TransactionRecord> TRANSACTION_PKEY = Internal.createUniqueKey(Transaction.TRANSACTION, DSL.name("transaction_pkey"), new TableField[] { Transaction.TRANSACTION.TX_HASH }, true);
    public static final UniqueKey<TransactionSizeRecord> TRANSACTION_SIZE_PKEY = Internal.createUniqueKey(TransactionSize.TRANSACTION_SIZE, DSL.name("transaction_size_pkey"), new TableField[] { TransactionSize.TRANSACTION_SIZE.TX_HASH }, true);
    public static final UniqueKey<TransactionWitnessRecord> TRANSACTION_WITNESS_PKEY = Internal.createUniqueKey(TransactionWitness.TRANSACTION_WITNESS, DSL.name("transaction_witness_pkey"), new TableField[] { TransactionWitness.TRANSACTION_WITNESS.TX_HASH, TransactionWitness.TRANSACTION_WITNESS.IDX }, true);
    public static final UniqueKey<TxInputRecord> TX_INPUT_PKEY = Internal.createUniqueKey(TxInput.TX_INPUT, DSL.name("tx_input_pkey"), new TableField[] { TxInput.TX_INPUT.OUTPUT_INDEX, TxInput.TX_INPUT.TX_HASH }, true);
    public static final UniqueKey<WithdrawalRecord> WITHDRAWAL_PKEY = Internal.createUniqueKey(Withdrawal.WITHDRAWAL, DSL.name("withdrawal_pkey"), new TableField[] { Withdrawal.WITHDRAWAL.ADDRESS, Withdrawal.WITHDRAWAL.TX_HASH }, true);
}
