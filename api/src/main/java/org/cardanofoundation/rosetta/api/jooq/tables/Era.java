/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables;


import java.util.Collection;

import org.cardanofoundation.rosetta.api.jooq.Keys;
import org.cardanofoundation.rosetta.api.jooq.Preprod;
import org.cardanofoundation.rosetta.api.jooq.tables.records.EraRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Era extends TableImpl<EraRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod.era</code>
     */
    public static final Era ERA = new Era();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EraRecord> getRecordType() {
        return EraRecord.class;
    }

    /**
     * The column <code>preprod.era.era</code>.
     */
    public final TableField<EraRecord, Integer> ERA_ = createField(DSL.name("era"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>preprod.era.start_slot</code>.
     */
    public final TableField<EraRecord, Long> START_SLOT = createField(DSL.name("start_slot"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>preprod.era.block</code>.
     */
    public final TableField<EraRecord, Long> BLOCK = createField(DSL.name("block"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>preprod.era.block_hash</code>.
     */
    public final TableField<EraRecord, String> BLOCK_HASH = createField(DSL.name("block_hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    private Era(Name alias, Table<EraRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Era(Name alias, Table<EraRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preprod.era</code> table reference
     */
    public Era(String alias) {
        this(DSL.name(alias), ERA);
    }

    /**
     * Create an aliased <code>preprod.era</code> table reference
     */
    public Era(Name alias) {
        this(alias, ERA);
    }

    /**
     * Create a <code>preprod.era</code> table reference
     */
    public Era() {
        this(DSL.name("era"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Preprod.PREPROD;
    }

    @Override
    public UniqueKey<EraRecord> getPrimaryKey() {
        return Keys.ERA_PKEY;
    }

    @Override
    public Era as(String alias) {
        return new Era(DSL.name(alias), this);
    }

    @Override
    public Era as(Name alias) {
        return new Era(alias, this);
    }

    @Override
    public Era as(Table<?> alias) {
        return new Era(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Era rename(String name) {
        return new Era(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Era rename(Name name) {
        return new Era(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Era rename(Table<?> name) {
        return new Era(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Era where(Condition condition) {
        return new Era(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Era where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Era where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Era where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Era where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Era where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Era where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Era where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Era whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Era whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
