/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.cardanofoundation.rosetta.api.jooq.Indexes;
import org.cardanofoundation.rosetta.api.jooq.Keys;
import org.cardanofoundation.rosetta.api.jooq.Preprod;
import org.cardanofoundation.rosetta.api.jooq.tables.records.TxInputRecord;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TxInput extends TableImpl<TxInputRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>preprod.tx_input</code>
     */
    public static final TxInput TX_INPUT = new TxInput();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TxInputRecord> getRecordType() {
        return TxInputRecord.class;
    }

    /**
     * The column <code>preprod.tx_input.output_index</code>.
     */
    public final TableField<TxInputRecord, Short> OUTPUT_INDEX = createField(DSL.name("output_index"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>preprod.tx_input.tx_hash</code>.
     */
    public final TableField<TxInputRecord, String> TX_HASH = createField(DSL.name("tx_hash"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>preprod.tx_input.spent_at_slot</code>.
     */
    public final TableField<TxInputRecord, Long> SPENT_AT_SLOT = createField(DSL.name("spent_at_slot"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.tx_input.spent_at_block</code>.
     */
    public final TableField<TxInputRecord, Long> SPENT_AT_BLOCK = createField(DSL.name("spent_at_block"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.tx_input.spent_at_block_hash</code>.
     */
    public final TableField<TxInputRecord, String> SPENT_AT_BLOCK_HASH = createField(DSL.name("spent_at_block_hash"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>preprod.tx_input.spent_block_time</code>.
     */
    public final TableField<TxInputRecord, Long> SPENT_BLOCK_TIME = createField(DSL.name("spent_block_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>preprod.tx_input.spent_epoch</code>.
     */
    public final TableField<TxInputRecord, Integer> SPENT_EPOCH = createField(DSL.name("spent_epoch"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>preprod.tx_input.spent_tx_hash</code>.
     */
    public final TableField<TxInputRecord, String> SPENT_TX_HASH = createField(DSL.name("spent_tx_hash"), SQLDataType.VARCHAR(64), this, "");

    private TxInput(Name alias, Table<TxInputRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TxInput(Name alias, Table<TxInputRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>preprod.tx_input</code> table reference
     */
    public TxInput(String alias) {
        this(DSL.name(alias), TX_INPUT);
    }

    /**
     * Create an aliased <code>preprod.tx_input</code> table reference
     */
    public TxInput(Name alias) {
        this(alias, TX_INPUT);
    }

    /**
     * Create a <code>preprod.tx_input</code> table reference
     */
    public TxInput() {
        this(DSL.name("tx_input"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Preprod.PREPROD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TX_INPUT_BLOCK, Indexes.IDX_TX_INPUT_SLOT);
    }

    @Override
    public UniqueKey<TxInputRecord> getPrimaryKey() {
        return Keys.TX_INPUT_PKEY;
    }

    @Override
    public TxInput as(String alias) {
        return new TxInput(DSL.name(alias), this);
    }

    @Override
    public TxInput as(Name alias) {
        return new TxInput(alias, this);
    }

    @Override
    public TxInput as(Table<?> alias) {
        return new TxInput(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TxInput rename(String name) {
        return new TxInput(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxInput rename(Name name) {
        return new TxInput(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxInput rename(Table<?> name) {
        return new TxInput(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxInput where(Condition condition) {
        return new TxInput(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxInput where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxInput where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxInput where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TxInput where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TxInput where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TxInput where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TxInput where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxInput whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TxInput whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
