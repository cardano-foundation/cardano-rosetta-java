/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables.records;


import java.time.LocalDateTime;

import org.cardanofoundation.rosetta.api.jooq.tables.Rollback;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RollbackRecord extends UpdatableRecordImpl<RollbackRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>preprod.rollback.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>preprod.rollback.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>preprod.rollback.rollback_to_block_hash</code>.
     */
    public void setRollbackToBlockHash(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>preprod.rollback.rollback_to_block_hash</code>.
     */
    public String getRollbackToBlockHash() {
        return (String) get(1);
    }

    /**
     * Setter for <code>preprod.rollback.rollback_to_slot</code>.
     */
    public void setRollbackToSlot(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>preprod.rollback.rollback_to_slot</code>.
     */
    public Long getRollbackToSlot() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>preprod.rollback.current_block_hash</code>.
     */
    public void setCurrentBlockHash(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>preprod.rollback.current_block_hash</code>.
     */
    public String getCurrentBlockHash() {
        return (String) get(3);
    }

    /**
     * Setter for <code>preprod.rollback.current_slot</code>.
     */
    public void setCurrentSlot(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>preprod.rollback.current_slot</code>.
     */
    public Long getCurrentSlot() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>preprod.rollback.current_block</code>.
     */
    public void setCurrentBlock(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>preprod.rollback.current_block</code>.
     */
    public Long getCurrentBlock() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>preprod.rollback.create_datetime</code>.
     */
    public void setCreateDatetime(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>preprod.rollback.create_datetime</code>.
     */
    public LocalDateTime getCreateDatetime() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>preprod.rollback.update_datetime</code>.
     */
    public void setUpdateDatetime(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>preprod.rollback.update_datetime</code>.
     */
    public LocalDateTime getUpdateDatetime() {
        return (LocalDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RollbackRecord
     */
    public RollbackRecord() {
        super(Rollback.ROLLBACK);
    }

    /**
     * Create a detached, initialised RollbackRecord
     */
    public RollbackRecord(Long id, String rollbackToBlockHash, Long rollbackToSlot, String currentBlockHash, Long currentSlot, Long currentBlock, LocalDateTime createDatetime, LocalDateTime updateDatetime) {
        super(Rollback.ROLLBACK);

        setId(id);
        setRollbackToBlockHash(rollbackToBlockHash);
        setRollbackToSlot(rollbackToSlot);
        setCurrentBlockHash(currentBlockHash);
        setCurrentSlot(currentSlot);
        setCurrentBlock(currentBlock);
        setCreateDatetime(createDatetime);
        setUpdateDatetime(updateDatetime);
        resetChangedOnNotNull();
    }
}
