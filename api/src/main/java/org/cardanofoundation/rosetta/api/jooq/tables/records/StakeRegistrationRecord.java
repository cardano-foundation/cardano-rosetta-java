/*
 * This file is generated by jOOQ.
 */
package org.cardanofoundation.rosetta.api.jooq.tables.records;


import java.time.LocalDateTime;

import org.cardanofoundation.rosetta.api.jooq.tables.StakeRegistration;
import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class StakeRegistrationRecord extends UpdatableRecordImpl<StakeRegistrationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>preprod.stake_registration.tx_hash</code>.
     */
    public void setTxHash(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>preprod.stake_registration.tx_hash</code>.
     */
    public String getTxHash() {
        return (String) get(0);
    }

    /**
     * Setter for <code>preprod.stake_registration.cert_index</code>.
     */
    public void setCertIndex(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>preprod.stake_registration.cert_index</code>.
     */
    public Integer getCertIndex() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>preprod.stake_registration.credential</code>.
     */
    public void setCredential(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>preprod.stake_registration.credential</code>.
     */
    public String getCredential() {
        return (String) get(2);
    }

    /**
     * Setter for <code>preprod.stake_registration.type</code>.
     */
    public void setType(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>preprod.stake_registration.type</code>.
     */
    public String getType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>preprod.stake_registration.address</code>.
     */
    public void setAddress(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>preprod.stake_registration.address</code>.
     */
    public String getAddress() {
        return (String) get(4);
    }

    /**
     * Setter for <code>preprod.stake_registration.epoch</code>.
     */
    public void setEpoch(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>preprod.stake_registration.epoch</code>.
     */
    public Integer getEpoch() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>preprod.stake_registration.slot</code>.
     */
    public void setSlot(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>preprod.stake_registration.slot</code>.
     */
    public Long getSlot() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>preprod.stake_registration.block_hash</code>.
     */
    public void setBlockHash(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>preprod.stake_registration.block_hash</code>.
     */
    public String getBlockHash() {
        return (String) get(7);
    }

    /**
     * Setter for <code>preprod.stake_registration.block</code>.
     */
    public void setBlock(Long value) {
        set(8, value);
    }

    /**
     * Getter for <code>preprod.stake_registration.block</code>.
     */
    public Long getBlock() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>preprod.stake_registration.block_time</code>.
     */
    public void setBlockTime(Long value) {
        set(9, value);
    }

    /**
     * Getter for <code>preprod.stake_registration.block_time</code>.
     */
    public Long getBlockTime() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>preprod.stake_registration.update_datetime</code>.
     */
    public void setUpdateDatetime(LocalDateTime value) {
        set(10, value);
    }

    /**
     * Getter for <code>preprod.stake_registration.update_datetime</code>.
     */
    public LocalDateTime getUpdateDatetime() {
        return (LocalDateTime) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StakeRegistrationRecord
     */
    public StakeRegistrationRecord() {
        super(StakeRegistration.STAKE_REGISTRATION);
    }

    /**
     * Create a detached, initialised StakeRegistrationRecord
     */
    public StakeRegistrationRecord(String txHash, Integer certIndex, String credential, String type, String address, Integer epoch, Long slot, String blockHash, Long block, Long blockTime, LocalDateTime updateDatetime) {
        super(StakeRegistration.STAKE_REGISTRATION);

        setTxHash(txHash);
        setCertIndex(certIndex);
        setCredential(credential);
        setType(type);
        setAddress(address);
        setEpoch(epoch);
        setSlot(slot);
        setBlockHash(blockHash);
        setBlock(block);
        setBlockTime(blockTime);
        setUpdateDatetime(updateDatetime);
        resetChangedOnNotNull();
    }
}
