package org.cardanofoundation.rosetta.api.construction.service;

import java.io.File;
import java.io.IOException;
import java.util.Objects;
import java.util.concurrent.CompletionException;

import org.springframework.beans.factory.annotation.Autowired;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.openapitools.client.model.ConstructionCombineRequest;
import org.openapitools.client.model.ConstructionCombineResponse;

import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.parallel.Execution;
import org.junit.jupiter.api.parallel.ExecutionMode;

import org.cardanofoundation.rosetta.api.IntegrationTest;
import org.cardanofoundation.rosetta.common.exception.ApiException;
import org.cardanofoundation.rosetta.common.util.RosettaConstants.RosettaErrorType;

import static com.bloxbean.cardano.client.crypto.Blake2bUtil.blake2bHash256;
import static com.bloxbean.cardano.client.util.HexUtil.decodeHexString;
import static com.bloxbean.cardano.client.util.HexUtil.encodeHexString;
import static org.junit.jupiter.api.Assertions.*;

@Execution(ExecutionMode.CONCURRENT)
class CombineApiTest extends IntegrationTest {

  @Autowired
  private ConstructionApiService constructionApiService;

  @RepeatedTest(10)
  void combineWithMetadataTest() throws IOException {
    ConstructionCombineRequest combineRequest = getCombineRequest(
        "testdata/construction/combine/combine_with_metadata.json");

    ConstructionCombineResponse constructionCombineResponse =
        constructionApiService.constructionCombineService(combineRequest);

    String signedTransaction = "827903803834613530306439303130323831383235383230326632336664386363613833356166323166336163333735626163363031663937656164373566326537393134336264663731666532633462653034336538663031303138323832353831643631626234306631613634376263383863316264366237333864623865623636333537643932363437346561356666643662616137366339666231393237313038323538316436316262343066316136343762633838633162643662373338646238656236363335376439323634373465613566666436626161373663396662313939633430303231393963343030333139303365383037353832303838636138363534353832653833393337383733323330623636343661323231303133346433653431653062633938323463653762653465306232386138393661313030643930313032383138323538323031623430306436306161663334656166366463626162396262613436303031613233343937383836636631313036366637383436393333643330653561643366353834303663393235303831333563623036303138376132373036616465383135343738323836376231353236653936313564303637343262653563353666303337616238353839346330393863326162303739373131333363303437376261656539326164663335323761643763633831366631336531653463333631303431323036663561323139656636346134303135383230303033366566336531663064336635393839653264313535656135346264623261373263346334353663636239353961663463393438363866343733663561303032353832303836383730656663393963343533613837336131363439326365383737333865633739613065626430363433373961363265326339636634653131393231396530333538316465313030303537353461653866393331613537316231373337303633633439303463623334623663343464626463396465363731636262373131303431393034643231396566363561313031353834303663323331326364343930363765636630393230646637653036373139396335356233666165663465633062636531626432636662393937393339373234373863343538373661663262633237316163373539633563653430616365356133393862396664623065333539663363333333666538353636343838303437383065a26a6f7065726174696f6e7382a6746f7065726174696f6e5f6964656e746966696572a265696e646578006d6e6574776f726b5f696e64657800676163636f756e74a16761646472657373783a616464723176786135707564786737376733736461646465636d773874766336686d796e79776e34396c6c747434666d766e3763706e6b63707866616d6f756e74a26863757272656e6379a26673796d626f6c6341444168646563696d616c73066576616c7565662d39303030306b636f696e5f6368616e6765a26f636f696e5f6964656e746966696572a16a6964656e7469666965727842326632336664386363613833356166323166336163333735626163363031663937656164373566326537393134336264663731666532633462653034336538663a316b636f696e5f616374696f6e6a636f696e5f7370656e74667374617475736773756363657373647479706565696e707574a4746f7065726174696f6e5f6964656e746966696572a165696e64657803686d65746164617461a17818766f7465526567697374726174696f6e4d65746164617461a5687374616b654b6579a2696865785f62797465737840383638373065666339396334353361383733613136343932636538373733386563373961306562643036343337396136326532633963663465313139323139656a63757276655f747970656c65647761726473323535313969766f74696e674b6579a2696865785f62797465737840303033366566336531663064336635393839653264313535656135346264623261373263346334353663636239353961663463393438363866343733663561306a63757276655f747970656c6564776172647332353531396b766f74696e674e6f6e63651904d26d72657761726441646472657373783b7374616b653175797171326132326172756e726674336b396568716337796a707874786a6d76676e6461653830787738396d7779676539736b79706f766f74696e675369676e617475726578803663323331326364343930363765636630393230646637653036373139396335356233666165663465633062636531626432636662393937393339373234373863343538373661663262633237316163373539633563653430616365356133393862396664623065333539663363333333666538353636343838303437383065667374617475736773756363657373647479706570766f7465526567697374726174696f6e767472616e73616374696f6e4d

    assertEquals(encodeHexString(blake2bHash256(decodeHexString(signedTransaction))), encodeHexString(blake2bHash256(decodeHexString(constructionCombineResponse.getSignedTransaction()))));
  }

  @RepeatedTest(10)
  void combineWithByronAddressTest() throws IOException {
    ConstructionCombineRequest combineRequest = getCombineRequest(
        "testdata/construction/combine/combine_with_byron_addresses.json");

    ConstructionCombineResponse constructionCombineResponse =
        constructionApiService.constructionCombineService(combineRequest);

    String signedTransaction = "827902183834613430306439303130323831383235383230326632336664386363613833356166323166336163333735626163363031663937656164373566326537393134336264663731666532633462653034336538663031303138323832353831643631626234306631613634376263383863316264366237333864623865623636333537643932363437346561356666643662616137366339666231393237313038323538316436316262343066316136343762633838633162643662373338646238656236363335376439323634373465613566666436626161373663396662313939633430303231393963343030333139303365386131303264393031303238313834353832303733666561383064343234323736616430393738643466653533313065386263326434383566356636626233626638373631323938396631313261643561376435383430646332613139343862666139343131623337653864323830623034633438613835616635353838626366353039633066636137393866376234363265626361393264363733336461636331663163366331343633363233633038353430316265303765613432326164346631633534333337356537643364323339336161306235383230646437356531353464613431376265636563353563646432343933323734353431333866303832313130323937643565383761623235653135666164313530663431613066356636a26a6f7065726174696f6e7381a6746f7065726174696f6e5f6964656e746966696572a265696e646578006d6e6574776f726b5f696e64657800676163636f756e74a16761646472657373783b416532746450775550455a4336574a66565178544e4e3274577734736b47724e367a5256756b76784a6d544679316e596b5647514275555255334c66616d6f756e74a26863757272656e6379a26673796d626f6c6341444168646563696d616c73066576616c7565662d39303030306b636f696e5f6368616e6765a26f636f696e5f6964656e746966696572a16a6964656e7469666965727842326632336664386363613833356166323166336163333735626163363031663937656164373566326537393134336264663731666532633462653034336538663a316b636f696e5f616374696f6e6a636f696e5f7370656e74667374617475736773756363657373647479706565696e707574767472616e73616374696f6e4d6574616461746148657860";

    assertEquals(encodeHexString(blake2bHash256(decodeHexString(signedTransaction))), encodeHexString(blake2bHash256(decodeHexString(constructionCombineResponse.getSignedTransaction()))));
  }

  @Test
  void combineWithInvalidSignatureTest() throws IOException {
    ConstructionCombineRequest combineRequest = getCombineRequest(
        "testdata/construction/combine/combine_with_invalid_transaction.json");

    ApiException actualException = assertThrows(ApiException.class, () ->
        constructionApiService.constructionCombineService(combineRequest));

    assertEquals(5019, actualException.getError().getCode());
  }

  @RepeatedTest(10)
  void combineWithByronAddressMissingChaincodeTest() throws IOException {
    ConstructionCombineRequest combineRequest = getCombineRequest(
        "testdata/construction/combine/combine_with_byron_addresses_missing_chaincode.json");

    // API Exception is wrapped in CompletionException when thrown from CompletableFuture
    CompletionException actualException = assertThrows(CompletionException.class, () ->
        constructionApiService.constructionCombineService(combineRequest));

    assertInstanceOf(ApiException.class, actualException.getCause());
    ApiException apiException = (ApiException) actualException.getCause();
    assertEquals(RosettaErrorType.CHAIN_CODE_MISSING.getCode(), apiException.getError().getCode());
    assertEquals(RosettaErrorType.CHAIN_CODE_MISSING.getMessage(), apiException.getError().getMessage());
  }

  private ConstructionCombineRequest getCombineRequest(String fileName) throws IOException {
    File file = new File(
        Objects.requireNonNull(this.getClass().getClassLoader().getResource(fileName)).getFile());
    ObjectMapper mapper = new ObjectMapper();
    return mapper.readValue(file, ConstructionCombineRequest.class);
  }
}
