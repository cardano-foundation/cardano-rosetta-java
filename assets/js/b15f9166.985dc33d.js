"use strict";(self.webpackChunkrosetta_docs=self.webpackChunkrosetta_docs||[]).push([[2475],{5537:(e,t,n)=>{n.d(t,{A:()=>A});var a=n(6540),r=n(4164),o=n(5627),s=n(6347),i=n(372),c=n(604),d=n(1861),l=n(8749);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}(n);return function(e){const t=(0,d.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c.aZ)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=h(e),[s,c]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[d,u]=m({queryString:n,groupId:r}),[f,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,l.Dv)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),x=(()=>{const e=d??f;return p({value:e,tabValues:o})?e:null})();(0,i.A)((()=>{x&&c(x)}),[x]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),b(e)}),[u,b,o]),tabValues:o}}var b=n(9136);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=n(4848);function g(e){let{className:t,block:n,selectedValue:a,selectValue:s,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.a_)(),l=e=>{const t=e.currentTarget,n=c.indexOf(t),r=i[n].value;r!==a&&(d(t),s(r))},u=e=>{let t=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:o}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>{c.push(e)},onKeyDown:u,onClick:l,...o,className:(0,r.A)("tabs__item",x.tabItem,o?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:o}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function y(e){const t=f(e);return(0,j.jsxs)("div",{className:(0,r.A)("tabs-container",x.tabList),children:[(0,j.jsx)(g,{...t,...e}),(0,j.jsx)(v,{...t,...e})]})}function A(e){const t=(0,b.A)();return(0,j.jsx)(y,{...e,children:u(e.children)},String(t))}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(6540);const r={},o=a.createContext(r);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:t},e.children)}},8860:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/ComponentDiagram.drawio-cca5233e69801b51dd3e3c58ad1c0574.svg"},9065:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"core-concepts/architecture","title":"System Architecture","description":"Overview of Cardano Rosetta Java architecture","source":"@site/docs/core-concepts/architecture.md","sourceDirName":"core-concepts","slug":"/core-concepts/architecture","permalink":"/cardano-rosetta-java/docs/core-concepts/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/cardano-foundation/cardano-rosetta-java/tree/main/docs/docs/core-concepts/architecture.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"System Architecture","description":"Overview of Cardano Rosetta Java architecture"},"sidebar":"tutorialSidebar","previous":{"title":"Core Concepts","permalink":"/cardano-rosetta-java/docs/category/core-concepts"},"next":{"title":"Cardano API Additions","permalink":"/cardano-rosetta-java/docs/core-concepts/cardano-addons"}}');var r=n(4848),o=n(8453);n(5537),n(9329);const s={sidebar_position:1,title:"System Architecture",description:"Overview of Cardano Rosetta Java architecture"},i="System Architecture",c={},d=[{value:"Implementation Details",id:"implementation-details",level:2},{value:"Key Components",id:"key-components",level:2},{value:"Cardano Node",id:"cardano-node",level:3},{value:"Cardano Submit API",id:"cardano-submit-api",level:3},{value:"Yaci Indexer App",id:"yaci-indexer-app",level:3},{value:"Database",id:"database",level:3},{value:"Rosetta API App",id:"rosetta-api-app",level:3}];function l(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"system-architecture",children:"System Architecture"})}),"\n","\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["This solution is an implementation of the ",(0,r.jsx)(t.a,{href:"https://docs.cloud.coinbase.com/rosetta/docs/welcome",children:"Mesh API"})," (formerly known as Rosetta API) specification for Cardano Blockchain."]})}),"\n",(0,r.jsxs)(t.p,{children:["Here and below we use ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/C4_model",children:"C4"})," notation to describe the solution architecture."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Context Diagram",src:n(9240).A+""})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Figure 1: Context Diagram showing system boundaries and external dependencies"})}),"\n",(0,r.jsxs)(t.p,{children:["The specific changes in this implementation can be found in ",(0,r.jsx)(t.a,{href:"/cardano-rosetta-java/docs/core-concepts/cardano-addons",children:"Cardano Specific API Additions"})]}),"\n",(0,r.jsxs)(t.admonition,{title:"Getting Started",type:"tip",children:[(0,r.jsx)(t.p,{children:"To use this Rosetta API for Cardano you can build the project from source or use the pre-built docker image."}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://hub.docker.com/r/cardanofoundation/cardano-rosetta-java",children:"Docker Images"})})]}),"\n",(0,r.jsx)(t.p,{children:"The solution provides Construction API (mutation of data) and Data API (read data) according to the Rosetta spec accessible via an REST API that allows you to interact with the Cardano blockchain."}),"\n",(0,r.jsx)(t.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,r.jsx)(t.p,{children:"The architecture consists of four essential components:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"#cardano-node",children:"Cardano Node"})}),": The foundational layer that maintains blockchain state and connects to the Cardano network"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"#yaci-indexer-app",children:"Yaci Indexer App"})}),": Processes and transforms blockchain data into queryable database records"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"#rosetta-api-app",children:"Rosetta API App"})}),": Implements the Rosetta specification endpoints for blockchain interaction"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"#database",children:"Database"})}),": Stores optimized blockchain data for efficient API access"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"The Cardano Node serves as the primary source of blockchain data. The Yaci Indexer App fetches data block-by-block from the node, processes it, and stores only the necessary information in the Database, optimized for query performance."}),"\n",(0,r.jsx)(t.p,{children:"For Data API requests, the Rosetta API App reads this indexed data directly from the Database. For Construction API requests, it uses the Cardano Node to validate and submit transactions to the Cardano network."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Component Diagram",src:n(8860).A+""})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.em,{children:"Figure 2: Component Diagram showing internal architecture"})}),"\n",(0,r.jsx)(t.h2,{id:"key-components",children:"Key Components"}),"\n",(0,r.jsx)(t.h3,{id:"cardano-node",children:"Cardano Node"}),"\n",(0,r.jsx)(t.p,{children:"The Cardano Node is a full implementation of the Cardano blockchain protocol that connects to the Cardano network, validates transactions and blocks, and maintains the blockchain state."}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Version"}),": 10.2.1 (configurable via build args)",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Built with"}),": GHC 8.10.7 and Cabal 3.8.1.0",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Runtime socket path"}),": ",(0,r.jsx)(t.code,{children:"/node/node.socket"}),(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Data directory"}),": ",(0,r.jsx)(t.code,{children:"/node/db"}),(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Network options"}),": mainnet, preprod, preview, sanchonet, devkit",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Configuration files"}),": stored in ",(0,r.jsx)(t.code,{children:"/config"})," directory"]})}),"\n",(0,r.jsx)(t.p,{children:"The node is the foundation of the system, providing blockchain data to the indexer and validating/submitting transactions to the network."}),"\n",(0,r.jsx)(t.h3,{id:"cardano-submit-api",children:"Cardano Submit API"}),"\n",(0,r.jsx)(t.p,{children:"The Cardano Submit API provides a REST interface for submitting transactions to the Cardano network."}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Port"}),": 8090 (configurable)",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Configuration file"}),": ",(0,r.jsx)(t.code,{children:"/cardano-submit-api-config/cardano-submit-api.yaml"}),(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Connects to"}),": Cardano Node via its socket",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Functionality"}),": Exposes HTTP endpoints for transaction submission",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Startup"}),": Started by the entrypoint script after node initialization"]})}),"\n",(0,r.jsx)(t.p,{children:"This component provides a standard interface for transaction submission, allowing the Rosetta API to submit user transactions to the Cardano network."}),"\n",(0,r.jsx)(t.h3,{id:"yaci-indexer-app",children:"Yaci Indexer App"}),"\n",(0,r.jsx)(t.p,{children:"The YACI (Yet Another Cardano Indexer) Indexer processes blockchain data from the Cardano Node and stores it in a structured format in the PostgreSQL database."}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Base library"}),": yaci version 0.3.5",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"API port"}),": 9095"]})}),"\n",(0,r.jsx)(t.p,{children:"The indexer features modular components that support different aspects of the Cardano blockchain, including blocks, transactions, UTXOs, staking, and epoch data. It handles efficient data processing with configurable pruning options to manage database size."}),"\n",(0,r.jsx)(t.h3,{id:"database",children:"Database"}),"\n",(0,r.jsx)(t.p,{children:"PostgreSQL database stores indexed blockchain data in a structured format optimized for API queries. While YACI store supports multiple database options, PostgreSQL is the default and recommended choice for this implementation."}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Version"}),": 14 (configurable)",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Schema name"}),": Based on network (e.g., mainnet, preprod)",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Default credentials"}),": Username: rosetta_db_admin, Password: configurable",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Data directory"}),": ",(0,r.jsx)(t.code,{children:"/var/lib/postgresql/data"})," (mapped to ",(0,r.jsx)(t.code,{children:"${DB_PATH}"})," on the host)"]})}),"\n",(0,r.jsxs)(t.p,{children:["Configurable performance parameters through ",(0,r.jsx)(t.a,{href:"../install-and-deploy/hardware-profiles",children:"hardware profiles"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"rosetta-api-app",children:"Rosetta API App"}),"\n",(0,r.jsxs)(t.p,{children:["The Rosetta API implements the Mesh (formerly Rosetta) API specification, providing a standardized interface for blockchain interaction. This application handles ",(0,r.jsx)(t.a,{href:"https://docs.cloud.coinbase.com/rosetta/docs/data-api-overview",children:"Data API"})," requests by reading aggregated data from the database, and manages ",(0,r.jsx)(t.a,{href:"https://docs.cloud.coinbase.com/rosetta/docs/construction-api-overview",children:"Construction API"})," requests by constructing and submitting transactions to the Cardano Node using the ",(0,r.jsx)(t.a,{href:"https://github.com/bloxbean/cardano-client-lib",children:"cardano-client-lib"}),"."]}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Implements"}),": Rosetta API version 1.4.13",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Built with"}),": Spring Boot 3.2.3",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Port"}),": 8082",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Java version"}),": 21",(0,r.jsx)(t.br,{}),"\n",(0,r.jsx)(t.strong,{children:"Operation modes"}),": Online (with node connection), Offline (transaction construction only)"]})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},9240:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/ContextDiagram.drawio-8ad497d97881e668a3002b12794f93dc.svg"},9329:(e,t,n)=>{n.d(t,{A:()=>s});n(6540);var a=n(4164);const r={tabItem:"tabItem_Ymn6"};var o=n(4848);function s(e){let{children:t,hidden:n,className:s}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,s),hidden:n,children:t})}}}]);