version: '3.8'
services:
  db:
    image: "${DB_IMAGE_NAME}:${DB_IMAGE_TAG}"
    ports:
      - "${DB_PORT}:${DB_PORT}"
    environment:
      POSTGRES_PASSWORD: "${DB_ADMIN_USER_SECRET}"
      POSTGRES_USER: "${DB_ADMIN_USER_NAME}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_ADMIN_USER_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: on-failure
    volumes:
      - ./data/postgres-data:/var/lib/postgresql/data
  bootstrap-db:
    build: ./database
    environment:
      DB_ADMIN_USER_SECRET: "${DB_ADMIN_USER_SECRET}"
      DB_ADMIN_USER_NAME: "${DB_ADMIN_USER_NAME}"
      SERVICE_USER_SECRET: "${SERVICE_USER_SECRET}"
      SERVICE_USER_NAME: "${SERVICE_USER_NAME}"
      DB_HOST: "db"
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_SCHEMA: ${DB_SCHEMA}
    depends_on:
      db:
        condition: service_healthy
#  api:
#    build: ./api
#    platform: linux/amd64
#    ports:
#      - "${API_BIND_PORT}:${API_EXPOSED_PORT}"
#    environment:
#      DB_HOST: "${DB_HOST}"
#      DB_PORT: "${DB_PORT}"
#      DB_NAME: "${DB_NAME}"
#      DB_USER: "${SERVICE_USER_NAME}"
#      DB_SECRET: "${SERVICE_USER_SECRET}"
#      DB_DRIVER_CLASS_NAME: "${DB_DRIVER_CLASS_NAME}"
#      DB_CONNECTION_PARAMS_PROVIDER_TYPE: ${DB_CONNECTION_PARAMS_PROVIDER_TYPE}
#    depends_on:
#      bootstrap-db:
#        condition: service_completed_successfully
#    restart: always
  consumer:
    build: ./consumer
    platform: linux/amd64
    ports:
      - "${CONSUMER_BIND_PORT}:${CONSUMER_EXPOSED_PORT}"
    environment:
      CONSUMER_PROFILES_ACTIVE: "${CONSUMER_PROFILES_ACTIVE}"
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      DB_NAME: "${DB_NAME}"
      DB_USER: "${DB_ADMIN_USER_NAME}"
      DB_SECRET: "${DB_ADMIN_USER_SECRET}"
      DB_DRIVER_CLASS_NAME: "${DB_DRIVER_CLASS_NAME}"
      DB_SCHEMA: "${DB_SCHEMA}"
      DB_CONNECTION_PARAMS_PROVIDER_TYPE: ${DB_CONNECTION_PARAMS_PROVIDER_TYPE}
      SCHEMA: "${SCHEMA}"
      DBLOCKS_BATCH_SIZE: "${BLOCKS_BATCH_SIZE}"
      BLOCKS_TOPIC: "${BLOCKS_TOPIC}"
      BOOSTRAP_SERVER_HOST: "${BOOSTRAP_SERVER_HOST}"
      BOOSTRAP_SERVER_PORT: "${BOOSTRAP_SERVER_PORT}"
      LOG: "${LOG}"
    restart: no

  redis-master:
    hostname: cardano.redis.master
    container_name: cardano-redis-master
    image: redis:7.0.5
    environment:
      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD=redis_password
    command: redis-server
    ports:
      - "26301:6379"
    deploy:
      resources:
        limits:
          memory: 100m

  redis-slave:
    hostname: cardano.redis.slave
    container_name: cardano-redis-slave
    image: redis:7.0.5
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis-master
      - REDIS_MASTER_PASSWORD=redis_password
      - REDIS_PASSWORD=redis_slave_pass
    command: redis-server --slaveof redis-master 6379
    ports:
      - "26302:6379"
    links:
      - redis-master
    deploy:
      resources:
        limits:
          memory: 100m

  redis-sentinel:
    hostname: cardano.redis.sentinel
    container_name: cardano-redis-sentinel
    image: 'bitnami/redis-sentinel'
    environment:
      - REDIS_MASTER_HOST=127.0.0.1
      - REDIS_MASTER_PORT_NUMBER=26301
      - REDIS_MASTER_PASSWORD=redis_password
      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=5000
      - REDIS_SENTINEL_FAILOVER_TIMEOUT=500
      - REDIS_SENTINEL_QUORUM=2
      - REDIS_SENTINEL_PASSWORD=redis_sentinel_pass
    ports:
      - "26379:26379"
    depends_on:
      - redis-master
      - redis-slave

  zookeeper:
    image: confluentinc/cp-zookeeper:5.1.2
    restart: always
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
      ZOOKEEPER_SERVERS: "zookeeper:22888:23888"
    ports:
      - "2181:2181"
    # volumes:
    #   - ./kafka/zoo:/var/lib/zookeeper/data

  kafka:
    image: confluentinc/cp-kafka:7.0.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_PORT: 9991
    # volumes:
    #   - ./kafka/data:/var/lib/kafka/data

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      - kafka

networks:
  default:
    name: cardano-rosetta-java
